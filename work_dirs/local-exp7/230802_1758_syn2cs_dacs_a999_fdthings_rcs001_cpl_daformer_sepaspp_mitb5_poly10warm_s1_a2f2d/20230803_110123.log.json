{"env_info": "sys.platform: linux\nPython: 3.6.9 (default, Jan 26 2021, 15:33:00) [GCC 8.4.0]\nCUDA available: True\nGPU 0: Tesla V100-SXM2-16GB\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 10.2, V10.2.89\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.2\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75\n  - CuDNN 7.6.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.2\nOpenCV: 4.4.0\nMMCV: 1.3.7\nMMCV Compiler: GCC 7.5\nMMCV CUDA Compiler: 10.2\nMMSegmentation: 0.16.0+6d87ab8", "seed": 1, "exp_name": "230802_1758_syn2cs_dacs_a999_fdthings_rcs001_cpl_daformer_sepaspp_mitb5_poly10warm_s1_a2f2d", "mmseg_version": "0.16.0+6d87ab8", "config": "log_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\nnorm_cfg = dict(type='BN', requires_grad=True)\nfind_unused_parameters = True\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained='pretrained/mit_b5.pth',\n    backbone=dict(type='mit_b5', style='pytorch'),\n    decode_head=dict(\n        type='DAFormerHead',\n        in_channels=[64, 128, 320, 512],\n        in_index=[0, 1, 2, 3],\n        channels=256,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        align_corners=False,\n        decoder_params=dict(\n            embed_dims=256,\n            embed_cfg=dict(type='mlp', act_cfg=None, norm_cfg=None),\n            embed_neck_cfg=dict(type='mlp', act_cfg=None, norm_cfg=None),\n            fusion_cfg=dict(\n                type='aspp',\n                sep=True,\n                dilations=(1, 6, 12, 18),\n                pool=False,\n                act_cfg=dict(type='ReLU'),\n                norm_cfg=dict(type='BN', requires_grad=True))),\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    train_cfg=dict(\n        work_dir=\n        'work_dirs/local-exp7/230802_1758_syn2cs_dacs_a999_fdthings_rcs001_cpl_daformer_sepaspp_mitb5_poly10warm_s1_a2f2d'\n    ),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'CityscapesDataset'\ndata_root = 'data/cityscapes/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (512, 512)\nsynthia_train_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(1280, 760)),\n    dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ncityscapes_train_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(1024, 512)),\n    dict(type='RandomCrop', crop_size=(512, 512)),\n    dict(type='RandomFlip', prob=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 512),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=4,\n    train=dict(\n        type='UDADataset',\n        source=dict(\n            type='SynthiaDataset',\n            data_root='data/synthia/',\n            img_dir='RGB',\n            ann_dir='GT/LABELS',\n            pipeline=[\n                dict(type='LoadImageFromFile'),\n                dict(type='LoadAnnotations'),\n                dict(type='Resize', img_scale=(1280, 760)),\n                dict(\n                    type='RandomCrop',\n                    crop_size=(512, 512),\n                    cat_max_ratio=0.75),\n                dict(type='RandomFlip', prob=0.5),\n                dict(\n                    type='Normalize',\n                    mean=[123.675, 116.28, 103.53],\n                    std=[58.395, 57.12, 57.375],\n                    to_rgb=True),\n                dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),\n                dict(type='DefaultFormatBundle'),\n                dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n            ]),\n        target=dict(\n            type='CityscapesDataset',\n            data_root='data/cityscapes/',\n            img_dir='leftImg8bit/train',\n            ann_dir='gtFine/train',\n            pipeline=[\n                dict(type='LoadImageFromFile'),\n                dict(type='LoadAnnotations'),\n                dict(type='Resize', img_scale=(1024, 512)),\n                dict(type='RandomCrop', crop_size=(512, 512)),\n                dict(type='RandomFlip', prob=0.5),\n                dict(\n                    type='Normalize',\n                    mean=[123.675, 116.28, 103.53],\n                    std=[58.395, 57.12, 57.375],\n                    to_rgb=True),\n                dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),\n                dict(type='DefaultFormatBundle'),\n                dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n            ]),\n        rare_class_sampling=dict(\n            min_pixels=3000, class_temp=0.01, min_crop_ratio=0.5)),\n    val=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nuda = dict(\n    type='DACS',\n    alpha=0.999,\n    pseudo_threshold=0.968,\n    pseudo_weight_ignore_top=15,\n    pseudo_weight_ignore_bottom=120,\n    imnet_feature_dist_lambda=0.005,\n    imnet_feature_dist_classes=[6, 7, 11, 12, 13, 14, 15, 16, 17, 18],\n    imnet_feature_dist_scale_min_ratio=0.75,\n    mix='class',\n    blur=True,\n    color_jitter_strength=0.2,\n    color_jitter_probability=0.2,\n    debug_img_interval=1000,\n    print_grad_magnitude=False,\n    tar_aug='weak_strong',\n    weight=0.5,\n    dropout=True,\n    thre='same',\n    model=dict(\n        type='EncoderDecoder',\n        pretrained='pretrained/mit_b5.pth',\n        backbone=dict(type='mit_b5', style='pytorch'),\n        decode_head=dict(\n            type='DAFormerHead',\n            in_channels=[64, 128, 320, 512],\n            in_index=[0, 1, 2, 3],\n            channels=256,\n            dropout_ratio=0.1,\n            num_classes=19,\n            norm_cfg=dict(type='BN', requires_grad=True),\n            align_corners=False,\n            decoder_params=dict(\n                embed_dims=256,\n                embed_cfg=dict(type='mlp', act_cfg=None, norm_cfg=None),\n                embed_neck_cfg=dict(type='mlp', act_cfg=None, norm_cfg=None),\n                fusion_cfg=dict(\n                    type='aspp',\n                    sep=True,\n                    dilations=(1, 6, 12, 18),\n                    pool=False,\n                    act_cfg=dict(type='ReLU'),\n                    norm_cfg=dict(type='BN', requires_grad=True))),\n            loss_decode=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n        train_cfg=dict(\n            work_dir=\n            'work_dirs/local-exp7/230802_1758_syn2cs_dacs_a999_fdthings_rcs001_cpl_daformer_sepaspp_mitb5_poly10warm_s1_a2f2d'\n        ),\n        test_cfg=dict(mode='whole')),\n    max_iters=40000)\nuse_ddp_wrapper = True\noptimizer = dict(\n    type='AdamW',\n    lr=6e-05,\n    betas=(0.9, 0.999),\n    weight_decay=0.01,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            head=dict(lr_mult=10.0),\n            pos_block=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = None\nlr_config = dict(\n    policy='poly',\n    warmup='linear',\n    warmup_iters=1500,\n    warmup_ratio=1e-06,\n    power=1.0,\n    min_lr=0.0,\n    by_epoch=False)\nn_gpus = 1\nseed = 1\nrunner = dict(type='IterBasedRunner', max_iters=40000)\ncheckpoint_config = dict(by_epoch=False, interval=40000, max_keep_ckpts=1)\nevaluation = dict(interval=4000, metric='mIoU')\nname = '230802_1758_syn2cs_dacs_a999_fdthings_rcs001_cpl_daformer_sepaspp_mitb5_poly10warm_s1_a2f2d'\nexp = 7\nname_dataset = 'synthia2cityscapes'\nname_architecture = 'daformer_sepaspp_mitb5'\nname_encoder = 'mitb5'\nname_decoder = 'daformer_sepaspp'\nname_uda = 'dacs_a999_fdthings_rcs0.01_cpl'\nname_opt = 'adamw_6e-05_pmTrue_poly10warm_1x2_40k'\nwork_dir = 'work_dirs/local-exp7/230802_1758_syn2cs_dacs_a999_fdthings_rcs001_cpl_daformer_sepaspp_mitb5_poly10warm_s1_a2f2d'\ngit_rev = '6d87ab857665f3c5a4b481c1da3fb5e227792830'\ngpu_ids = range(0, 1)\n", "CLASSES": ["road", "sidewalk", "building", "wall", "fence", "pole", "traffic light", "traffic sign", "vegetation", "terrain", "sky", "person", "rider", "car", "truck", "bus", "train", "motorcycle", "bicycle"], "PALETTE": [[128, 64, 128], [244, 35, 232], [70, 70, 70], [102, 102, 156], [190, 153, 153], [153, 153, 153], [250, 170, 30], [220, 220, 0], [107, 142, 35], [152, 251, 152], [70, 130, 180], [220, 20, 60], [255, 0, 0], [0, 0, 142], [0, 0, 70], [0, 60, 100], [0, 80, 100], [0, 0, 230], [119, 11, 32]]}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.0, "memory": 9819, "data_time": 0.04174, "decode.loss_seg": 2.74979, "decode.acc_seg": 9.6417, "src.loss_imnet_feat_dist": 0.06604, "mix.decode.loss_seg": 1.3865, "mix.decode.acc_seg": 13.67354, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 18.58045, "time": 1.54045}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.0, "memory": 9819, "data_time": 0.02463, "decode.loss_seg": 2.56042, "decode.acc_seg": 43.56686, "src.loss_imnet_feat_dist": 0.06544, "mix.decode.loss_seg": 1.24528, "mix.decode.acc_seg": 33.15687, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 24.33029, "time": 1.47135}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 1e-05, "memory": 9819, "data_time": 0.0226, "decode.loss_seg": 2.12679, "decode.acc_seg": 59.49533, "src.loss_imnet_feat_dist": 0.07665, "mix.decode.loss_seg": 1.12401, "mix.decode.acc_seg": 52.85296, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 49.58196, "time": 1.46959}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 1e-05, "memory": 9819, "data_time": 0.02259, "decode.loss_seg": 1.67712, "decode.acc_seg": 66.06093, "src.loss_imnet_feat_dist": 0.09742, "mix.decode.loss_seg": 0.84215, "mix.decode.acc_seg": 61.97715, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 68.32761, "time": 1.45632}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 1e-05, "memory": 9819, "data_time": 0.02232, "decode.loss_seg": 1.37529, "decode.acc_seg": 70.179, "src.loss_imnet_feat_dist": 0.10272, "mix.decode.loss_seg": 0.68183, "mix.decode.acc_seg": 67.73635, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 76.45703, "time": 1.44986}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 1e-05, "memory": 9819, "data_time": 0.02248, "decode.loss_seg": 1.12213, "decode.acc_seg": 74.03622, "src.loss_imnet_feat_dist": 0.10701, "mix.decode.loss_seg": 0.52591, "mix.decode.acc_seg": 67.58769, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 76.57587, "time": 1.45041}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 1e-05, "memory": 9819, "data_time": 0.02253, "decode.loss_seg": 0.96782, "decode.acc_seg": 74.41658, "src.loss_imnet_feat_dist": 0.11547, "mix.decode.loss_seg": 0.44187, "mix.decode.acc_seg": 67.87502, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 76.26714, "time": 1.45685}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 2e-05, "memory": 9819, "data_time": 0.02229, "decode.loss_seg": 0.87162, "decode.acc_seg": 75.14073, "src.loss_imnet_feat_dist": 0.11189, "mix.decode.loss_seg": 0.43883, "mix.decode.acc_seg": 68.41793, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 77.79225, "time": 1.46264}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 2e-05, "memory": 9819, "data_time": 0.02208, "decode.loss_seg": 0.75243, "decode.acc_seg": 76.94686, "src.loss_imnet_feat_dist": 0.12037, "mix.decode.loss_seg": 0.42177, "mix.decode.acc_seg": 69.76091, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 78.21674, "time": 1.44818}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 2e-05, "memory": 9819, "data_time": 0.02241, "decode.loss_seg": 0.68789, "decode.acc_seg": 77.60659, "src.loss_imnet_feat_dist": 0.11324, "mix.decode.loss_seg": 0.3721, "mix.decode.acc_seg": 69.24901, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 79.56024, "time": 1.46559}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 2e-05, "memory": 9819, "data_time": 0.02177, "decode.loss_seg": 0.63763, "decode.acc_seg": 78.31734, "src.loss_imnet_feat_dist": 0.11709, "mix.decode.loss_seg": 0.38409, "mix.decode.acc_seg": 68.49658, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 75.0417, "time": 1.44495}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 2e-05, "memory": 9819, "data_time": 0.0233, "decode.loss_seg": 0.59102, "decode.acc_seg": 79.30974, "src.loss_imnet_feat_dist": 0.11727, "mix.decode.loss_seg": 0.30913, "mix.decode.acc_seg": 68.36707, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 73.604, "time": 1.45404}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 3e-05, "memory": 9819, "data_time": 0.02316, "decode.loss_seg": 0.53919, "decode.acc_seg": 80.74093, "src.loss_imnet_feat_dist": 0.1209, "mix.decode.loss_seg": 0.28599, "mix.decode.acc_seg": 70.30116, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 74.51131, "time": 1.47868}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 3e-05, "memory": 9819, "data_time": 0.0221, "decode.loss_seg": 0.50265, "decode.acc_seg": 81.615, "src.loss_imnet_feat_dist": 0.12214, "mix.decode.loss_seg": 0.28709, "mix.decode.acc_seg": 71.40453, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 77.2277, "time": 1.45052}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 3e-05, "memory": 9819, "data_time": 0.02302, "decode.loss_seg": 0.45372, "decode.acc_seg": 82.3796, "src.loss_imnet_feat_dist": 0.11579, "mix.decode.loss_seg": 0.22084, "mix.decode.acc_seg": 71.48657, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 78.46764, "time": 1.46462}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 3e-05, "memory": 9819, "data_time": 0.0219, "decode.loss_seg": 0.41688, "decode.acc_seg": 82.23511, "src.loss_imnet_feat_dist": 0.12304, "mix.decode.loss_seg": 0.20288, "mix.decode.acc_seg": 73.04728, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 79.94469, "time": 1.45156}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 3e-05, "memory": 9819, "data_time": 0.02306, "decode.loss_seg": 0.42941, "decode.acc_seg": 83.53124, "src.loss_imnet_feat_dist": 0.12412, "mix.decode.loss_seg": 0.22605, "mix.decode.acc_seg": 71.82796, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 77.90479, "time": 1.47272}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 4e-05, "memory": 9819, "data_time": 0.02293, "decode.loss_seg": 0.46572, "decode.acc_seg": 80.96184, "src.loss_imnet_feat_dist": 0.12717, "mix.decode.loss_seg": 0.29617, "mix.decode.acc_seg": 70.51072, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 75.62607, "time": 1.47195}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 4e-05, "memory": 9819, "data_time": 0.02463, "decode.loss_seg": 0.40454, "decode.acc_seg": 83.6882, "src.loss_imnet_feat_dist": 0.12769, "mix.decode.loss_seg": 0.22088, "mix.decode.acc_seg": 72.68383, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 81.29148, "time": 1.48541}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 4e-05, "memory": 9819, "data_time": 0.02313, "decode.loss_seg": 0.34231, "decode.acc_seg": 85.12468, "src.loss_imnet_feat_dist": 0.12165, "mix.decode.loss_seg": 0.23125, "mix.decode.acc_seg": 73.21001, "consistency.decode.loss_seg": 1e-05, "consistency.decode.acc_seg": 77.28555, "time": 1.46047}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 4e-05, "memory": 9819, "data_time": 0.02238, "decode.loss_seg": 0.34398, "decode.acc_seg": 84.26578, "src.loss_imnet_feat_dist": 0.11942, "mix.decode.loss_seg": 0.21173, "mix.decode.acc_seg": 73.01759, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 81.72682, "time": 1.50269}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 4e-05, "memory": 9819, "data_time": 0.023, "decode.loss_seg": 0.32513, "decode.acc_seg": 84.66747, "src.loss_imnet_feat_dist": 0.117, "mix.decode.loss_seg": 0.19087, "mix.decode.acc_seg": 74.58079, "consistency.decode.loss_seg": 2e-05, "consistency.decode.acc_seg": 81.0151, "time": 1.46155}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 4e-05, "memory": 9819, "data_time": 0.02251, "decode.loss_seg": 0.36864, "decode.acc_seg": 84.09471, "src.loss_imnet_feat_dist": 0.1233, "mix.decode.loss_seg": 0.191, "mix.decode.acc_seg": 71.86595, "consistency.decode.loss_seg": 2e-05, "consistency.decode.acc_seg": 82.2002, "time": 1.46189}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 5e-05, "memory": 9819, "data_time": 0.02343, "decode.loss_seg": 0.33867, "decode.acc_seg": 84.67239, "src.loss_imnet_feat_dist": 0.12421, "mix.decode.loss_seg": 0.20611, "mix.decode.acc_seg": 74.57319, "consistency.decode.loss_seg": 3e-05, "consistency.decode.acc_seg": 80.79179, "time": 1.47074}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 5e-05, "memory": 9819, "data_time": 0.02288, "decode.loss_seg": 0.30478, "decode.acc_seg": 86.34524, "src.loss_imnet_feat_dist": 0.12597, "mix.decode.loss_seg": 0.18655, "mix.decode.acc_seg": 77.38212, "consistency.decode.loss_seg": 9e-05, "consistency.decode.acc_seg": 81.07362, "time": 1.46735}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 5e-05, "memory": 9819, "data_time": 0.02305, "decode.loss_seg": 0.31812, "decode.acc_seg": 86.13011, "src.loss_imnet_feat_dist": 0.1267, "mix.decode.loss_seg": 0.19079, "mix.decode.acc_seg": 76.35114, "consistency.decode.loss_seg": 0.00011, "consistency.decode.acc_seg": 81.63622, "time": 1.48578}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 5e-05, "memory": 9819, "data_time": 0.02289, "decode.loss_seg": 0.39551, "decode.acc_seg": 83.44688, "src.loss_imnet_feat_dist": 0.13784, "mix.decode.loss_seg": 0.2781, "mix.decode.acc_seg": 73.50686, "consistency.decode.loss_seg": 0.00045, "consistency.decode.acc_seg": 76.19181, "time": 1.46508}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 5e-05, "memory": 9819, "data_time": 0.02319, "decode.loss_seg": 0.41097, "decode.acc_seg": 81.83345, "src.loss_imnet_feat_dist": 0.13552, "mix.decode.loss_seg": 0.26552, "mix.decode.acc_seg": 70.73183, "consistency.decode.loss_seg": 0.00087, "consistency.decode.acc_seg": 73.94208, "time": 1.46877}
{"mode": "train", "epoch": 1, "iter": 1450, "lr": 6e-05, "memory": 9819, "data_time": 0.02252, "decode.loss_seg": 0.37242, "decode.acc_seg": 83.57653, "src.loss_imnet_feat_dist": 0.13563, "mix.decode.loss_seg": 0.28318, "mix.decode.acc_seg": 75.10558, "consistency.decode.loss_seg": 0.00074, "consistency.decode.acc_seg": 71.29823, "time": 1.45951}
{"mode": "train", "epoch": 1, "iter": 1500, "lr": 6e-05, "memory": 9819, "data_time": 0.02208, "decode.loss_seg": 0.30609, "decode.acc_seg": 85.31224, "src.loss_imnet_feat_dist": 0.13835, "mix.decode.loss_seg": 0.19984, "mix.decode.acc_seg": 77.25287, "consistency.decode.loss_seg": 0.00046, "consistency.decode.acc_seg": 81.48278, "time": 1.45098}
{"mode": "train", "epoch": 1, "iter": 1550, "lr": 6e-05, "memory": 9819, "data_time": 0.02254, "decode.loss_seg": 0.27419, "decode.acc_seg": 86.98658, "src.loss_imnet_feat_dist": 0.12671, "mix.decode.loss_seg": 0.19311, "mix.decode.acc_seg": 79.11625, "consistency.decode.loss_seg": 0.0002, "consistency.decode.acc_seg": 83.66419, "time": 1.46771}
