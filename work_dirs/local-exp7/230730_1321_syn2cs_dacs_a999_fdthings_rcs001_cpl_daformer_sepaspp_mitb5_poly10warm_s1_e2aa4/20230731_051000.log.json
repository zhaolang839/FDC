{"env_info": "sys.platform: linux\nPython: 3.6.9 (default, Jan 26 2021, 15:33:00) [GCC 8.4.0]\nCUDA available: True\nGPU 0: Tesla V100-SXM2-16GB\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 10.2, V10.2.89\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.8.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.2\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70\n  - CuDNN 7.6.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.2, CUDNN_VERSION=7.6.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.0\nOpenCV: 4.4.0\nMMCV: 1.3.7\nMMCV Compiler: GCC 7.5\nMMCV CUDA Compiler: 10.2\nMMSegmentation: 0.16.0+6d87ab8", "seed": 1, "exp_name": "230730_1321_syn2cs_dacs_a999_fdthings_rcs001_cpl_daformer_sepaspp_mitb5_poly10warm_s1_e2aa4", "mmseg_version": "0.16.0+6d87ab8", "config": "log_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\nnorm_cfg = dict(type='BN', requires_grad=True)\nfind_unused_parameters = True\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained='pretrained/mit_b5.pth',\n    backbone=dict(type='mit_b5', style='pytorch'),\n    decode_head=dict(\n        type='DAFormerHead',\n        in_channels=[64, 128, 320, 512],\n        in_index=[0, 1, 2, 3],\n        channels=256,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        align_corners=False,\n        decoder_params=dict(\n            embed_dims=256,\n            embed_cfg=dict(type='mlp', act_cfg=None, norm_cfg=None),\n            embed_neck_cfg=dict(type='mlp', act_cfg=None, norm_cfg=None),\n            fusion_cfg=dict(\n                type='aspp',\n                sep=True,\n                dilations=(1, 6, 12, 18),\n                pool=False,\n                act_cfg=dict(type='ReLU'),\n                norm_cfg=dict(type='BN', requires_grad=True))),\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    train_cfg=dict(\n        work_dir=\n        'work_dirs/local-exp7/230730_1321_syn2cs_dacs_a999_fdthings_rcs001_cpl_daformer_sepaspp_mitb5_poly10warm_s1_e2aa4'\n    ),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'CityscapesDataset'\ndata_root = 'data/cityscapes/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (512, 512)\nsynthia_train_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(1280, 760)),\n    dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ncityscapes_train_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(1024, 512)),\n    dict(type='RandomCrop', crop_size=(512, 512)),\n    dict(type='RandomFlip', prob=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 512),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=4,\n    train=dict(\n        type='UDADataset',\n        source=dict(\n            type='SynthiaDataset',\n            data_root='data/synthia/',\n            img_dir='RGB',\n            ann_dir='GT/LABELS',\n            pipeline=[\n                dict(type='LoadImageFromFile'),\n                dict(type='LoadAnnotations'),\n                dict(type='Resize', img_scale=(1280, 760)),\n                dict(\n                    type='RandomCrop',\n                    crop_size=(512, 512),\n                    cat_max_ratio=0.75),\n                dict(type='RandomFlip', prob=0.5),\n                dict(\n                    type='Normalize',\n                    mean=[123.675, 116.28, 103.53],\n                    std=[58.395, 57.12, 57.375],\n                    to_rgb=True),\n                dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),\n                dict(type='DefaultFormatBundle'),\n                dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n            ]),\n        target=dict(\n            type='CityscapesDataset',\n            data_root='data/cityscapes/',\n            img_dir='leftImg8bit/train',\n            ann_dir='gtFine/train',\n            pipeline=[\n                dict(type='LoadImageFromFile'),\n                dict(type='LoadAnnotations'),\n                dict(type='Resize', img_scale=(1024, 512)),\n                dict(type='RandomCrop', crop_size=(512, 512)),\n                dict(type='RandomFlip', prob=0.5),\n                dict(\n                    type='Normalize',\n                    mean=[123.675, 116.28, 103.53],\n                    std=[58.395, 57.12, 57.375],\n                    to_rgb=True),\n                dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),\n                dict(type='DefaultFormatBundle'),\n                dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n            ]),\n        rare_class_sampling=dict(\n            min_pixels=3000, class_temp=0.01, min_crop_ratio=0.5)),\n    val=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nuda = dict(\n    type='DACS',\n    alpha=0.999,\n    pseudo_threshold=0.968,\n    pseudo_weight_ignore_top=15,\n    pseudo_weight_ignore_bottom=120,\n    imnet_feature_dist_lambda=0.005,\n    imnet_feature_dist_classes=[6, 7, 11, 12, 13, 14, 15, 16, 17, 18],\n    imnet_feature_dist_scale_min_ratio=0.75,\n    mix='class',\n    blur=True,\n    color_jitter_strength=0.2,\n    color_jitter_probability=0.2,\n    debug_img_interval=1000,\n    print_grad_magnitude=False,\n    tar_aug='weak',\n    weight=1,\n    dropout=True,\n    thre='same',\n    model=dict(\n        type='EncoderDecoder',\n        pretrained='pretrained/mit_b5.pth',\n        backbone=dict(type='mit_b5', style='pytorch'),\n        decode_head=dict(\n            type='DAFormerHead',\n            in_channels=[64, 128, 320, 512],\n            in_index=[0, 1, 2, 3],\n            channels=256,\n            dropout_ratio=0.1,\n            num_classes=19,\n            norm_cfg=dict(type='BN', requires_grad=True),\n            align_corners=False,\n            decoder_params=dict(\n                embed_dims=256,\n                embed_cfg=dict(type='mlp', act_cfg=None, norm_cfg=None),\n                embed_neck_cfg=dict(type='mlp', act_cfg=None, norm_cfg=None),\n                fusion_cfg=dict(\n                    type='aspp',\n                    sep=True,\n                    dilations=(1, 6, 12, 18),\n                    pool=False,\n                    act_cfg=dict(type='ReLU'),\n                    norm_cfg=dict(type='BN', requires_grad=True))),\n            loss_decode=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n        train_cfg=dict(\n            work_dir=\n            'work_dirs/local-exp7/230730_1321_syn2cs_dacs_a999_fdthings_rcs001_cpl_daformer_sepaspp_mitb5_poly10warm_s1_e2aa4'\n        ),\n        test_cfg=dict(mode='whole')),\n    max_iters=40000)\nuse_ddp_wrapper = True\noptimizer = dict(\n    type='AdamW',\n    lr=6e-05,\n    betas=(0.9, 0.999),\n    weight_decay=0.01,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            head=dict(lr_mult=10.0),\n            pos_block=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = None\nlr_config = dict(\n    policy='poly',\n    warmup='linear',\n    warmup_iters=1500,\n    warmup_ratio=1e-06,\n    power=1.0,\n    min_lr=0.0,\n    by_epoch=False)\nn_gpus = 1\nseed = 1\nrunner = dict(type='IterBasedRunner', max_iters=40000)\ncheckpoint_config = dict(by_epoch=False, interval=40000, max_keep_ckpts=1)\nevaluation = dict(interval=4000, metric='mIoU')\nname = '230730_1321_syn2cs_dacs_a999_fdthings_rcs001_cpl_daformer_sepaspp_mitb5_poly10warm_s1_e2aa4'\nexp = 7\nname_dataset = 'synthia2cityscapes'\nname_architecture = 'daformer_sepaspp_mitb5'\nname_encoder = 'mitb5'\nname_decoder = 'daformer_sepaspp'\nname_uda = 'dacs_a999_fdthings_rcs0.01_cpl'\nname_opt = 'adamw_6e-05_pmTrue_poly10warm_1x2_40k'\nwork_dir = 'work_dirs/local-exp7/230730_1321_syn2cs_dacs_a999_fdthings_rcs001_cpl_daformer_sepaspp_mitb5_poly10warm_s1_e2aa4'\ngit_rev = '6d87ab857665f3c5a4b481c1da3fb5e227792830'\ngpu_ids = range(0, 1)\n", "CLASSES": ["road", "sidewalk", "building", "wall", "fence", "pole", "traffic light", "traffic sign", "vegetation", "terrain", "sky", "person", "rider", "car", "truck", "bus", "train", "motorcycle", "bicycle"], "PALETTE": [[128, 64, 128], [244, 35, 232], [70, 70, 70], [102, 102, 156], [190, 153, 153], [153, 153, 153], [250, 170, 30], [220, 220, 0], [107, 142, 35], [152, 251, 152], [70, 130, 180], [220, 20, 60], [255, 0, 0], [0, 0, 142], [0, 0, 70], [0, 60, 100], [0, 80, 100], [0, 0, 230], [119, 11, 32]]}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.0, "memory": 9819, "data_time": 0.04232, "decode.loss_seg": 2.7521, "decode.acc_seg": 9.25014, "src.loss_imnet_feat_dist": 0.06987, "mix.decode.loss_seg": 1.39491, "mix.decode.acc_seg": 13.98798, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 19.57507, "time": 1.44809}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.0, "memory": 9819, "data_time": 0.02436, "decode.loss_seg": 2.55726, "decode.acc_seg": 44.04076, "src.loss_imnet_feat_dist": 0.06617, "mix.decode.loss_seg": 1.25882, "mix.decode.acc_seg": 31.04268, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 25.28693, "time": 1.35766}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 1e-05, "memory": 9819, "data_time": 0.02501, "decode.loss_seg": 2.13603, "decode.acc_seg": 59.64562, "src.loss_imnet_feat_dist": 0.07887, "mix.decode.loss_seg": 1.16716, "mix.decode.acc_seg": 51.37016, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 50.11828, "time": 1.36085}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 1e-05, "memory": 9819, "data_time": 0.02488, "decode.loss_seg": 1.67644, "decode.acc_seg": 66.19894, "src.loss_imnet_feat_dist": 0.09743, "mix.decode.loss_seg": 0.86949, "mix.decode.acc_seg": 60.6377, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 69.56211, "time": 1.36767}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 1e-05, "memory": 9819, "data_time": 0.02371, "decode.loss_seg": 1.37336, "decode.acc_seg": 70.07229, "src.loss_imnet_feat_dist": 0.10677, "mix.decode.loss_seg": 0.68986, "mix.decode.acc_seg": 67.22865, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 76.65667, "time": 1.35477}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 1e-05, "memory": 9819, "data_time": 0.02297, "decode.loss_seg": 1.11997, "decode.acc_seg": 73.90688, "src.loss_imnet_feat_dist": 0.10621, "mix.decode.loss_seg": 0.5426, "mix.decode.acc_seg": 67.12815, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 77.16593, "time": 1.34591}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 1e-05, "memory": 9819, "data_time": 0.02403, "decode.loss_seg": 0.97532, "decode.acc_seg": 74.00656, "src.loss_imnet_feat_dist": 0.11288, "mix.decode.loss_seg": 0.46539, "mix.decode.acc_seg": 67.94578, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 77.70021, "time": 1.34782}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 2e-05, "memory": 9819, "data_time": 0.02337, "decode.loss_seg": 0.87545, "decode.acc_seg": 75.17427, "src.loss_imnet_feat_dist": 0.11562, "mix.decode.loss_seg": 0.43812, "mix.decode.acc_seg": 68.5937, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 78.16307, "time": 1.33988}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 2e-05, "memory": 9819, "data_time": 0.02466, "decode.loss_seg": 0.75384, "decode.acc_seg": 76.96598, "src.loss_imnet_feat_dist": 0.12118, "mix.decode.loss_seg": 0.39365, "mix.decode.acc_seg": 69.24475, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 77.65966, "time": 1.36118}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 2e-05, "memory": 9819, "data_time": 0.0257, "decode.loss_seg": 0.69299, "decode.acc_seg": 77.3817, "src.loss_imnet_feat_dist": 0.11392, "mix.decode.loss_seg": 0.35957, "mix.decode.acc_seg": 68.91399, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 80.40385, "time": 1.36207}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 2e-05, "memory": 9819, "data_time": 0.02536, "decode.loss_seg": 0.6342, "decode.acc_seg": 78.40425, "src.loss_imnet_feat_dist": 0.11758, "mix.decode.loss_seg": 0.31937, "mix.decode.acc_seg": 66.49913, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 79.80647, "time": 1.36449}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 2e-05, "memory": 9819, "data_time": 0.02529, "decode.loss_seg": 0.59298, "decode.acc_seg": 79.29306, "src.loss_imnet_feat_dist": 0.11797, "mix.decode.loss_seg": 0.331, "mix.decode.acc_seg": 67.88422, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 80.94477, "time": 1.357}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 3e-05, "memory": 9819, "data_time": 0.0261, "decode.loss_seg": 0.52633, "decode.acc_seg": 81.24304, "src.loss_imnet_feat_dist": 0.11675, "mix.decode.loss_seg": 0.252, "mix.decode.acc_seg": 69.54533, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 80.31557, "time": 1.36396}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 3e-05, "memory": 9819, "data_time": 0.02577, "decode.loss_seg": 0.48962, "decode.acc_seg": 82.05211, "src.loss_imnet_feat_dist": 0.1189, "mix.decode.loss_seg": 0.25412, "mix.decode.acc_seg": 72.05516, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 80.59961, "time": 1.37166}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 3e-05, "memory": 9819, "data_time": 0.02582, "decode.loss_seg": 0.44778, "decode.acc_seg": 82.69184, "src.loss_imnet_feat_dist": 0.11444, "mix.decode.loss_seg": 0.2118, "mix.decode.acc_seg": 72.16945, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 81.24779, "time": 1.35986}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 3e-05, "memory": 9819, "data_time": 0.02445, "decode.loss_seg": 0.41233, "decode.acc_seg": 82.47065, "src.loss_imnet_feat_dist": 0.12239, "mix.decode.loss_seg": 0.20235, "mix.decode.acc_seg": 72.21607, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 80.89, "time": 1.35506}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 3e-05, "memory": 9819, "data_time": 0.02458, "decode.loss_seg": 0.40315, "decode.acc_seg": 84.40342, "src.loss_imnet_feat_dist": 0.12221, "mix.decode.loss_seg": 0.21097, "mix.decode.acc_seg": 73.42292, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 80.87588, "time": 1.35383}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 4e-05, "memory": 9819, "data_time": 0.02518, "decode.loss_seg": 0.4472, "decode.acc_seg": 81.74677, "src.loss_imnet_feat_dist": 0.12126, "mix.decode.loss_seg": 0.25596, "mix.decode.acc_seg": 68.55077, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 78.87441, "time": 1.35721}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 4e-05, "memory": 9819, "data_time": 0.02473, "decode.loss_seg": 0.4049, "decode.acc_seg": 83.86358, "src.loss_imnet_feat_dist": 0.13187, "mix.decode.loss_seg": 0.25282, "mix.decode.acc_seg": 72.37743, "consistency.decode.loss_seg": 1e-05, "consistency.decode.acc_seg": 80.55959, "time": 1.35881}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 4e-05, "memory": 9819, "data_time": 0.02558, "decode.loss_seg": 0.37265, "decode.acc_seg": 83.90094, "src.loss_imnet_feat_dist": 0.12238, "mix.decode.loss_seg": 0.2173, "mix.decode.acc_seg": 71.64664, "consistency.decode.loss_seg": 1e-05, "consistency.decode.acc_seg": 77.46445, "time": 1.36432}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 4e-05, "memory": 9819, "data_time": 0.02615, "decode.loss_seg": 0.34618, "decode.acc_seg": 84.16861, "src.loss_imnet_feat_dist": 0.11944, "mix.decode.loss_seg": 0.1866, "mix.decode.acc_seg": 70.67382, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 82.33659, "time": 1.3954}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 4e-05, "memory": 9819, "data_time": 0.02602, "decode.loss_seg": 0.33353, "decode.acc_seg": 84.40975, "src.loss_imnet_feat_dist": 0.12187, "mix.decode.loss_seg": 0.18017, "mix.decode.acc_seg": 73.66858, "consistency.decode.loss_seg": 1e-05, "consistency.decode.acc_seg": 83.56246, "time": 1.35717}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 4e-05, "memory": 9819, "data_time": 0.02607, "decode.loss_seg": 0.36796, "decode.acc_seg": 83.81223, "src.loss_imnet_feat_dist": 0.12398, "mix.decode.loss_seg": 0.19866, "mix.decode.acc_seg": 73.73244, "consistency.decode.loss_seg": 2e-05, "consistency.decode.acc_seg": 83.95752, "time": 1.3722}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 5e-05, "memory": 9819, "data_time": 0.02351, "decode.loss_seg": 0.34812, "decode.acc_seg": 84.28374, "src.loss_imnet_feat_dist": 0.12456, "mix.decode.loss_seg": 0.2141, "mix.decode.acc_seg": 72.74769, "consistency.decode.loss_seg": 3e-05, "consistency.decode.acc_seg": 83.07304, "time": 1.34868}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 5e-05, "memory": 9819, "data_time": 0.02396, "decode.loss_seg": 0.30513, "decode.acc_seg": 86.27993, "src.loss_imnet_feat_dist": 0.12571, "mix.decode.loss_seg": 0.19122, "mix.decode.acc_seg": 75.26279, "consistency.decode.loss_seg": 6e-05, "consistency.decode.acc_seg": 83.54597, "time": 1.35731}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 5e-05, "memory": 9819, "data_time": 0.02535, "decode.loss_seg": 0.35197, "decode.acc_seg": 85.12322, "src.loss_imnet_feat_dist": 0.12893, "mix.decode.loss_seg": 0.24174, "mix.decode.acc_seg": 76.0675, "consistency.decode.loss_seg": 5e-05, "consistency.decode.acc_seg": 83.69069, "time": 1.35511}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 5e-05, "memory": 9819, "data_time": 0.02419, "decode.loss_seg": 0.36251, "decode.acc_seg": 84.52344, "src.loss_imnet_feat_dist": 0.1375, "mix.decode.loss_seg": 0.24205, "mix.decode.acc_seg": 74.30486, "consistency.decode.loss_seg": 0.00027, "consistency.decode.acc_seg": 78.5867, "time": 1.34644}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 5e-05, "memory": 9819, "data_time": 0.02368, "decode.loss_seg": 0.35093, "decode.acc_seg": 83.48982, "src.loss_imnet_feat_dist": 0.13145, "mix.decode.loss_seg": 0.24104, "mix.decode.acc_seg": 74.22906, "consistency.decode.loss_seg": 0.00042, "consistency.decode.acc_seg": 75.21062, "time": 1.34803}
{"mode": "train", "epoch": 1, "iter": 1450, "lr": 6e-05, "memory": 9819, "data_time": 0.02358, "decode.loss_seg": 0.34432, "decode.acc_seg": 84.53851, "src.loss_imnet_feat_dist": 0.13339, "mix.decode.loss_seg": 0.21814, "mix.decode.acc_seg": 74.04383, "consistency.decode.loss_seg": 0.00034, "consistency.decode.acc_seg": 79.23596, "time": 1.34783}
{"mode": "train", "epoch": 1, "iter": 1500, "lr": 6e-05, "memory": 9819, "data_time": 0.02299, "decode.loss_seg": 0.30106, "decode.acc_seg": 85.61634, "src.loss_imnet_feat_dist": 0.13762, "mix.decode.loss_seg": 0.24736, "mix.decode.acc_seg": 77.17654, "consistency.decode.loss_seg": 0.00025, "consistency.decode.acc_seg": 82.99359, "time": 1.34266}
{"mode": "train", "epoch": 1, "iter": 1550, "lr": 6e-05, "memory": 9819, "data_time": 0.02264, "decode.loss_seg": 0.29334, "decode.acc_seg": 86.46289, "src.loss_imnet_feat_dist": 0.129, "mix.decode.loss_seg": 0.20944, "mix.decode.acc_seg": 78.63419, "consistency.decode.loss_seg": 0.00029, "consistency.decode.acc_seg": 84.81302, "time": 1.35325}
{"mode": "train", "epoch": 1, "iter": 1600, "lr": 6e-05, "memory": 9819, "data_time": 0.02305, "decode.loss_seg": 0.28231, "decode.acc_seg": 85.95282, "src.loss_imnet_feat_dist": 0.13, "mix.decode.loss_seg": 0.24562, "mix.decode.acc_seg": 78.13771, "consistency.decode.loss_seg": 0.00047, "consistency.decode.acc_seg": 84.48121, "time": 1.36496}
{"mode": "train", "epoch": 1, "iter": 1650, "lr": 6e-05, "memory": 9819, "data_time": 0.024, "decode.loss_seg": 0.28705, "decode.acc_seg": 86.13896, "src.loss_imnet_feat_dist": 0.13213, "mix.decode.loss_seg": 0.21663, "mix.decode.acc_seg": 80.08949, "consistency.decode.loss_seg": 0.00041, "consistency.decode.acc_seg": 85.65126, "time": 1.35537}
{"mode": "train", "epoch": 1, "iter": 1700, "lr": 6e-05, "memory": 9819, "data_time": 0.02286, "decode.loss_seg": 0.28617, "decode.acc_seg": 85.56163, "src.loss_imnet_feat_dist": 0.1344, "mix.decode.loss_seg": 0.17562, "mix.decode.acc_seg": 80.29444, "consistency.decode.loss_seg": 0.00052, "consistency.decode.acc_seg": 85.32327, "time": 1.34211}
{"mode": "train", "epoch": 1, "iter": 1750, "lr": 6e-05, "memory": 9819, "data_time": 0.02375, "decode.loss_seg": 0.24398, "decode.acc_seg": 86.02708, "src.loss_imnet_feat_dist": 0.13004, "mix.decode.loss_seg": 0.17198, "mix.decode.acc_seg": 81.38501, "consistency.decode.loss_seg": 0.00055, "consistency.decode.acc_seg": 87.19038, "time": 1.34418}
{"mode": "train", "epoch": 1, "iter": 1800, "lr": 6e-05, "memory": 9819, "data_time": 0.02266, "decode.loss_seg": 0.24771, "decode.acc_seg": 87.39397, "src.loss_imnet_feat_dist": 0.12889, "mix.decode.loss_seg": 0.1819, "mix.decode.acc_seg": 81.57392, "consistency.decode.loss_seg": 0.00031, "consistency.decode.acc_seg": 87.91477, "time": 1.33767}
{"mode": "train", "epoch": 1, "iter": 1850, "lr": 6e-05, "memory": 9819, "data_time": 0.02442, "decode.loss_seg": 0.30783, "decode.acc_seg": 84.97428, "src.loss_imnet_feat_dist": 0.12731, "mix.decode.loss_seg": 0.26481, "mix.decode.acc_seg": 78.60023, "consistency.decode.loss_seg": 0.00168, "consistency.decode.acc_seg": 86.22577, "time": 1.35516}
{"mode": "train", "epoch": 1, "iter": 1900, "lr": 6e-05, "memory": 9819, "data_time": 0.02582, "decode.loss_seg": 0.28075, "decode.acc_seg": 85.41476, "src.loss_imnet_feat_dist": 0.12705, "mix.decode.loss_seg": 0.23303, "mix.decode.acc_seg": 78.26231, "consistency.decode.loss_seg": 0.00444, "consistency.decode.acc_seg": 84.44933, "time": 1.37877}
{"mode": "train", "epoch": 1, "iter": 1950, "lr": 6e-05, "memory": 9819, "data_time": 0.02612, "decode.loss_seg": 0.27434, "decode.acc_seg": 84.85953, "src.loss_imnet_feat_dist": 0.13492, "mix.decode.loss_seg": 0.21767, "mix.decode.acc_seg": 80.48245, "consistency.decode.loss_seg": 0.0011, "consistency.decode.acc_seg": 85.91627, "time": 1.37152}
{"mode": "train", "epoch": 1, "iter": 2000, "lr": 6e-05, "memory": 9819, "data_time": 0.02349, "decode.loss_seg": 0.24394, "decode.acc_seg": 87.70836, "src.loss_imnet_feat_dist": 0.13293, "mix.decode.loss_seg": 0.20838, "mix.decode.acc_seg": 81.98773, "consistency.decode.loss_seg": 0.0009, "consistency.decode.acc_seg": 87.15068, "time": 1.35774}
{"mode": "train", "epoch": 1, "iter": 2050, "lr": 6e-05, "memory": 9819, "data_time": 0.025, "decode.loss_seg": 0.23473, "decode.acc_seg": 87.3217, "src.loss_imnet_feat_dist": 0.12256, "mix.decode.loss_seg": 0.21952, "mix.decode.acc_seg": 82.02283, "consistency.decode.loss_seg": 0.00114, "consistency.decode.acc_seg": 86.80799, "time": 1.40755}
{"mode": "train", "epoch": 1, "iter": 2100, "lr": 6e-05, "memory": 9819, "data_time": 0.02422, "decode.loss_seg": 0.30723, "decode.acc_seg": 85.07026, "src.loss_imnet_feat_dist": 0.14051, "mix.decode.loss_seg": 0.29548, "mix.decode.acc_seg": 78.23048, "consistency.decode.loss_seg": 0.00292, "consistency.decode.acc_seg": 85.53949, "time": 1.3518}
{"mode": "train", "epoch": 1, "iter": 2150, "lr": 6e-05, "memory": 9819, "data_time": 0.0231, "decode.loss_seg": 0.2783, "decode.acc_seg": 87.11419, "src.loss_imnet_feat_dist": 0.13026, "mix.decode.loss_seg": 0.21965, "mix.decode.acc_seg": 81.3134, "consistency.decode.loss_seg": 0.00114, "consistency.decode.acc_seg": 88.36697, "time": 1.34537}
{"mode": "train", "epoch": 1, "iter": 2200, "lr": 6e-05, "memory": 9819, "data_time": 0.02411, "decode.loss_seg": 0.26687, "decode.acc_seg": 86.48095, "src.loss_imnet_feat_dist": 0.13525, "mix.decode.loss_seg": 0.21854, "mix.decode.acc_seg": 81.99831, "consistency.decode.loss_seg": 0.00134, "consistency.decode.acc_seg": 88.44773, "time": 1.34755}
{"mode": "train", "epoch": 1, "iter": 2250, "lr": 6e-05, "memory": 9819, "data_time": 0.02284, "decode.loss_seg": 0.23578, "decode.acc_seg": 87.78599, "src.loss_imnet_feat_dist": 0.12728, "mix.decode.loss_seg": 0.20918, "mix.decode.acc_seg": 82.27406, "consistency.decode.loss_seg": 0.00127, "consistency.decode.acc_seg": 89.59309, "time": 1.34016}
