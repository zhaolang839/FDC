{"env_info": "sys.platform: linux\nPython: 3.6.9 (default, Jan 26 2021, 15:33:00) [GCC 8.4.0]\nCUDA available: True\nGPU 0: Tesla V100-SXM2-16GB\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 10.2, V10.2.89\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.2\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75\n  - CuDNN 7.6.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.2\nOpenCV: 4.4.0\nMMCV: 1.3.7\nMMCV Compiler: GCC 7.5\nMMCV CUDA Compiler: 10.2\nMMSegmentation: 0.16.0+6d87ab8", "seed": 1, "exp_name": "230712_2314_syn2cs_dacs_a999_fdthings_rcs001_cpl_daformer_sepaspp_mitb5_poly10warm_s1_8418c", "mmseg_version": "0.16.0+6d87ab8", "config": "log_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\nnorm_cfg = dict(type='BN', requires_grad=True)\nfind_unused_parameters = True\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained='pretrained/mit_b5.pth',\n    backbone=dict(type='mit_b5', style='pytorch'),\n    decode_head=dict(\n        type='DAFormerHead',\n        in_channels=[64, 128, 320, 512],\n        in_index=[0, 1, 2, 3],\n        channels=256,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        align_corners=False,\n        decoder_params=dict(\n            embed_dims=256,\n            embed_cfg=dict(type='mlp', act_cfg=None, norm_cfg=None),\n            embed_neck_cfg=dict(type='mlp', act_cfg=None, norm_cfg=None),\n            fusion_cfg=dict(\n                type='aspp',\n                sep=True,\n                dilations=(1, 6, 12, 18),\n                pool=False,\n                act_cfg=dict(type='ReLU'),\n                norm_cfg=dict(type='BN', requires_grad=True))),\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    train_cfg=dict(\n        work_dir=\n        'work_dirs/local-exp7/230712_2314_syn2cs_dacs_a999_fdthings_rcs001_cpl_daformer_sepaspp_mitb5_poly10warm_s1_8418c'\n    ),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'CityscapesDataset'\ndata_root = 'data/cityscapes/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (512, 512)\nsynthia_train_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(1280, 760)),\n    dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ncityscapes_train_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(1024, 512)),\n    dict(type='RandomCrop', crop_size=(512, 512)),\n    dict(type='RandomFlip', prob=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 512),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=4,\n    train=dict(\n        type='UDADataset',\n        source=dict(\n            type='SynthiaDataset',\n            data_root='data/synthia/',\n            img_dir='RGB',\n            ann_dir='GT/LABELS',\n            pipeline=[\n                dict(type='LoadImageFromFile'),\n                dict(type='LoadAnnotations'),\n                dict(type='Resize', img_scale=(1280, 760)),\n                dict(\n                    type='RandomCrop',\n                    crop_size=(512, 512),\n                    cat_max_ratio=0.75),\n                dict(type='RandomFlip', prob=0.5),\n                dict(\n                    type='Normalize',\n                    mean=[123.675, 116.28, 103.53],\n                    std=[58.395, 57.12, 57.375],\n                    to_rgb=True),\n                dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),\n                dict(type='DefaultFormatBundle'),\n                dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n            ]),\n        target=dict(\n            type='CityscapesDataset',\n            data_root='data/cityscapes/',\n            img_dir='leftImg8bit/train',\n            ann_dir='gtFine/train',\n            pipeline=[\n                dict(type='LoadImageFromFile'),\n                dict(type='LoadAnnotations'),\n                dict(type='Resize', img_scale=(1024, 512)),\n                dict(type='RandomCrop', crop_size=(512, 512)),\n                dict(type='RandomFlip', prob=0.5),\n                dict(\n                    type='Normalize',\n                    mean=[123.675, 116.28, 103.53],\n                    std=[58.395, 57.12, 57.375],\n                    to_rgb=True),\n                dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),\n                dict(type='DefaultFormatBundle'),\n                dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n            ]),\n        rare_class_sampling=dict(\n            min_pixels=3000, class_temp=0.01, min_crop_ratio=0.5)),\n    val=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nuda = dict(\n    type='DACS',\n    alpha=0.999,\n    pseudo_threshold=0.968,\n    pseudo_weight_ignore_top=15,\n    pseudo_weight_ignore_bottom=120,\n    imnet_feature_dist_lambda=0.005,\n    imnet_feature_dist_classes=[6, 7, 11, 12, 13, 14, 15, 16, 17, 18],\n    imnet_feature_dist_scale_min_ratio=0.75,\n    mix='class',\n    blur=True,\n    color_jitter_strength=0.2,\n    color_jitter_probability=0.2,\n    debug_img_interval=1000,\n    print_grad_magnitude=False,\n    tar_aug='strong',\n    weight=4,\n    dropout=0.5,\n    thre='same',\n    bata=0.1,\n    gamar=-5,\n    model=dict(\n        type='EncoderDecoder',\n        pretrained='pretrained/mit_b5.pth',\n        backbone=dict(type='mit_b5', style='pytorch'),\n        decode_head=dict(\n            type='DAFormerHead',\n            in_channels=[64, 128, 320, 512],\n            in_index=[0, 1, 2, 3],\n            channels=256,\n            dropout_ratio=0.1,\n            num_classes=19,\n            norm_cfg=dict(type='BN', requires_grad=True),\n            align_corners=False,\n            decoder_params=dict(\n                embed_dims=256,\n                embed_cfg=dict(type='mlp', act_cfg=None, norm_cfg=None),\n                embed_neck_cfg=dict(type='mlp', act_cfg=None, norm_cfg=None),\n                fusion_cfg=dict(\n                    type='aspp',\n                    sep=True,\n                    dilations=(1, 6, 12, 18),\n                    pool=False,\n                    act_cfg=dict(type='ReLU'),\n                    norm_cfg=dict(type='BN', requires_grad=True))),\n            loss_decode=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n        train_cfg=dict(\n            work_dir=\n            'work_dirs/local-exp7/230712_2314_syn2cs_dacs_a999_fdthings_rcs001_cpl_daformer_sepaspp_mitb5_poly10warm_s1_8418c'\n        ),\n        test_cfg=dict(mode='whole')),\n    max_iters=40000)\nuse_ddp_wrapper = True\noptimizer = dict(\n    type='AdamW',\n    lr=6e-05,\n    betas=(0.9, 0.999),\n    weight_decay=0.01,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            head=dict(lr_mult=10.0),\n            pos_block=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = None\nlr_config = dict(\n    policy='poly',\n    warmup='linear',\n    warmup_iters=1500,\n    warmup_ratio=1e-06,\n    power=1.0,\n    min_lr=0.0,\n    by_epoch=False)\nn_gpus = 1\nseed = 1\nrunner = dict(type='IterBasedRunner', max_iters=40000)\ncheckpoint_config = dict(by_epoch=False, interval=40000, max_keep_ckpts=1)\nevaluation = dict(interval=4000, metric='mIoU')\nname = '230712_2314_syn2cs_dacs_a999_fdthings_rcs001_cpl_daformer_sepaspp_mitb5_poly10warm_s1_8418c'\nexp = 7\nname_dataset = 'synthia2cityscapes'\nname_architecture = 'daformer_sepaspp_mitb5'\nname_encoder = 'mitb5'\nname_decoder = 'daformer_sepaspp'\nname_uda = 'dacs_a999_fdthings_rcs0.01_cpl'\nname_opt = 'adamw_6e-05_pmTrue_poly10warm_1x2_40k'\nwork_dir = 'work_dirs/local-exp7/230712_2314_syn2cs_dacs_a999_fdthings_rcs001_cpl_daformer_sepaspp_mitb5_poly10warm_s1_8418c'\ngit_rev = '6d87ab857665f3c5a4b481c1da3fb5e227792830'\ngpu_ids = range(0, 1)\n", "CLASSES": ["road", "sidewalk", "building", "wall", "fence", "pole", "traffic light", "traffic sign", "vegetation", "terrain", "sky", "person", "rider", "car", "truck", "bus", "train", "motorcycle", "bicycle"], "PALETTE": [[128, 64, 128], [244, 35, 232], [70, 70, 70], [102, 102, 156], [190, 153, 153], [153, 153, 153], [250, 170, 30], [220, 220, 0], [107, 142, 35], [152, 251, 152], [70, 130, 180], [220, 20, 60], [255, 0, 0], [0, 0, 142], [0, 0, 70], [0, 60, 100], [0, 80, 100], [0, 0, 230], [119, 11, 32]]}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.0, "memory": 9819, "data_time": 0.03754, "decode.loss_seg": 2.7524, "decode.acc_seg": 9.26328, "src.loss_imnet_feat_dist": 0.06791, "mix.decode.loss_seg": 1.42308, "mix.decode.acc_seg": 13.95759, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 12.6545, "time": 1.50004}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.0, "memory": 9819, "data_time": 0.02059, "decode.loss_seg": 2.5543, "decode.acc_seg": 44.30355, "src.loss_imnet_feat_dist": 0.06734, "mix.decode.loss_seg": 1.26091, "mix.decode.acc_seg": 33.04935, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 16.48748, "time": 1.452}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 1e-05, "memory": 9819, "data_time": 0.02104, "decode.loss_seg": 2.12598, "decode.acc_seg": 59.98594, "src.loss_imnet_feat_dist": 0.08393, "mix.decode.loss_seg": 1.11382, "mix.decode.acc_seg": 52.86138, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 38.01755, "time": 1.4515}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 1e-05, "memory": 9819, "data_time": 0.02153, "decode.loss_seg": 1.67823, "decode.acc_seg": 66.4649, "src.loss_imnet_feat_dist": 0.09792, "mix.decode.loss_seg": 0.87964, "mix.decode.acc_seg": 62.33134, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 56.30778, "time": 1.45863}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 1e-05, "memory": 9819, "data_time": 0.02051, "decode.loss_seg": 1.38437, "decode.acc_seg": 70.17861, "src.loss_imnet_feat_dist": 0.10325, "mix.decode.loss_seg": 0.63813, "mix.decode.acc_seg": 65.89452, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 65.16128, "time": 1.44942}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 1e-05, "memory": 9819, "data_time": 0.02229, "decode.loss_seg": 1.1311, "decode.acc_seg": 73.93769, "src.loss_imnet_feat_dist": 0.10522, "mix.decode.loss_seg": 0.54763, "mix.decode.acc_seg": 68.11907, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 67.54013, "time": 1.45882}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 1e-05, "memory": 9819, "data_time": 0.02175, "decode.loss_seg": 0.97471, "decode.acc_seg": 74.24647, "src.loss_imnet_feat_dist": 0.11806, "mix.decode.loss_seg": 0.50279, "mix.decode.acc_seg": 67.87212, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 66.15849, "time": 1.45504}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 2e-05, "memory": 9819, "data_time": 0.02267, "decode.loss_seg": 0.87259, "decode.acc_seg": 75.08623, "src.loss_imnet_feat_dist": 0.11465, "mix.decode.loss_seg": 0.43437, "mix.decode.acc_seg": 70.2073, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 61.59727, "time": 1.46556}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 2e-05, "memory": 9819, "data_time": 0.02286, "decode.loss_seg": 0.74494, "decode.acc_seg": 77.17787, "src.loss_imnet_feat_dist": 0.12199, "mix.decode.loss_seg": 0.3727, "mix.decode.acc_seg": 68.57644, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 64.5117, "time": 1.46187}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 2e-05, "memory": 9819, "data_time": 0.02172, "decode.loss_seg": 0.69467, "decode.acc_seg": 77.5347, "src.loss_imnet_feat_dist": 0.11399, "mix.decode.loss_seg": 0.3424, "mix.decode.acc_seg": 70.2071, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 65.62088, "time": 1.45415}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 2e-05, "memory": 9819, "data_time": 0.02165, "decode.loss_seg": 0.63951, "decode.acc_seg": 78.46418, "src.loss_imnet_feat_dist": 0.12, "mix.decode.loss_seg": 0.31599, "mix.decode.acc_seg": 70.07053, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 59.9202, "time": 1.45158}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 2e-05, "memory": 9819, "data_time": 0.02184, "decode.loss_seg": 0.58805, "decode.acc_seg": 79.56233, "src.loss_imnet_feat_dist": 0.11876, "mix.decode.loss_seg": 0.29037, "mix.decode.acc_seg": 68.90084, "consistency.decode.loss_seg": 1e-05, "consistency.decode.acc_seg": 61.86304, "time": 1.45535}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 3e-05, "memory": 9819, "data_time": 0.02246, "decode.loss_seg": 0.52267, "decode.acc_seg": 81.13237, "src.loss_imnet_feat_dist": 0.1158, "mix.decode.loss_seg": 0.29386, "mix.decode.acc_seg": 70.70253, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 57.5934, "time": 1.44883}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 3e-05, "memory": 9819, "data_time": 0.02123, "decode.loss_seg": 0.52186, "decode.acc_seg": 80.82639, "src.loss_imnet_feat_dist": 0.12062, "mix.decode.loss_seg": 0.27712, "mix.decode.acc_seg": 70.01523, "consistency.decode.loss_seg": 8e-05, "consistency.decode.acc_seg": 51.59969, "time": 1.45106}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 3e-05, "memory": 9819, "data_time": 0.02218, "decode.loss_seg": 0.45389, "decode.acc_seg": 82.44797, "src.loss_imnet_feat_dist": 0.11584, "mix.decode.loss_seg": 0.24096, "mix.decode.acc_seg": 72.18222, "consistency.decode.loss_seg": 4e-05, "consistency.decode.acc_seg": 56.2149, "time": 1.45358}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 3e-05, "memory": 9819, "data_time": 0.02152, "decode.loss_seg": 0.43165, "decode.acc_seg": 81.6976, "src.loss_imnet_feat_dist": 0.12929, "mix.decode.loss_seg": 0.22505, "mix.decode.acc_seg": 71.42156, "consistency.decode.loss_seg": 9e-05, "consistency.decode.acc_seg": 54.92505, "time": 1.45402}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 3e-05, "memory": 9819, "data_time": 0.02091, "decode.loss_seg": 0.40414, "decode.acc_seg": 84.48988, "src.loss_imnet_feat_dist": 0.12388, "mix.decode.loss_seg": 0.21635, "mix.decode.acc_seg": 73.43157, "consistency.decode.loss_seg": 0.00015, "consistency.decode.acc_seg": 54.16851, "time": 1.44549}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 4e-05, "memory": 9819, "data_time": 0.02035, "decode.loss_seg": 0.46463, "decode.acc_seg": 80.95759, "src.loss_imnet_feat_dist": 0.12407, "mix.decode.loss_seg": 0.23141, "mix.decode.acc_seg": 70.04414, "consistency.decode.loss_seg": 0.00038, "consistency.decode.acc_seg": 57.11696, "time": 1.43817}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 4e-05, "memory": 9819, "data_time": 0.02174, "decode.loss_seg": 0.37047, "decode.acc_seg": 84.65946, "src.loss_imnet_feat_dist": 0.1247, "mix.decode.loss_seg": 0.19301, "mix.decode.acc_seg": 73.02831, "consistency.decode.loss_seg": 0.00011, "consistency.decode.acc_seg": 59.0888, "time": 1.45633}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 4e-05, "memory": 9819, "data_time": 0.02098, "decode.loss_seg": 0.34571, "decode.acc_seg": 85.00148, "src.loss_imnet_feat_dist": 0.12001, "mix.decode.loss_seg": 0.21137, "mix.decode.acc_seg": 75.08508, "consistency.decode.loss_seg": 0.00272, "consistency.decode.acc_seg": 42.04081, "time": 1.44206}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 4e-05, "memory": 9819, "data_time": 0.02096, "decode.loss_seg": 0.35007, "decode.acc_seg": 83.98243, "src.loss_imnet_feat_dist": 0.11988, "mix.decode.loss_seg": 0.19189, "mix.decode.acc_seg": 74.64563, "consistency.decode.loss_seg": 0.00085, "consistency.decode.acc_seg": 43.30326, "time": 1.49621}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 4e-05, "memory": 9819, "data_time": 0.02081, "decode.loss_seg": 0.33481, "decode.acc_seg": 84.31593, "src.loss_imnet_feat_dist": 0.12111, "mix.decode.loss_seg": 0.19678, "mix.decode.acc_seg": 74.54168, "consistency.decode.loss_seg": 0.00067, "consistency.decode.acc_seg": 54.74347, "time": 1.44577}
