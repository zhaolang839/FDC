{"env_info": "sys.platform: linux\nPython: 3.6.9 (default, Jan 26 2021, 15:33:00) [GCC 8.4.0]\nCUDA available: True\nGPU 0: Tesla V100-SXM2-16GB\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 10.2, V10.2.89\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.2\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75\n  - CuDNN 7.6.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.2\nOpenCV: 4.4.0\nMMCV: 1.3.7\nMMCV Compiler: GCC 7.5\nMMCV CUDA Compiler: 10.2\nMMSegmentation: 0.16.0+6d87ab8", "seed": 0, "exp_name": "230712_2210_gta2cs_uda_warm_fdthings_rcs_croppl_a999_daformer_mitb5_s0_f3d56", "mmseg_version": "0.16.0+6d87ab8", "config": "log_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\nnorm_cfg = dict(type='BN', requires_grad=True)\nfind_unused_parameters = True\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained='pretrained/mit_b5.pth',\n    backbone=dict(type='mit_b5', style='pytorch'),\n    decode_head=dict(\n        type='DAFormerHead',\n        in_channels=[64, 128, 320, 512],\n        in_index=[0, 1, 2, 3],\n        channels=256,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        align_corners=False,\n        decoder_params=dict(\n            embed_dims=256,\n            embed_cfg=dict(type='mlp', act_cfg=None, norm_cfg=None),\n            embed_neck_cfg=dict(type='mlp', act_cfg=None, norm_cfg=None),\n            fusion_cfg=dict(\n                type='aspp',\n                sep=True,\n                dilations=(1, 6, 12, 18),\n                pool=False,\n                act_cfg=dict(type='ReLU'),\n                norm_cfg=dict(type='BN', requires_grad=True))),\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    train_cfg=dict(\n        work_dir=\n        'work_dirs/local-basic/230712_2210_gta2cs_uda_warm_fdthings_rcs_croppl_a999_daformer_mitb5_s0_f3d56'\n    ),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'CityscapesDataset'\ndata_root = 'data/cityscapes/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (512, 512)\ngta_train_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(1280, 720)),\n    dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ncityscapes_train_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(1024, 512)),\n    dict(type='RandomCrop', crop_size=(512, 512)),\n    dict(type='RandomFlip', prob=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 512),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=4,\n    train=dict(\n        type='UDADataset',\n        source=dict(\n            type='GTADataset',\n            data_root='data/gta/',\n            img_dir='images',\n            ann_dir='labels',\n            pipeline=[\n                dict(type='LoadImageFromFile'),\n                dict(type='LoadAnnotations'),\n                dict(type='Resize', img_scale=(1280, 720)),\n                dict(\n                    type='RandomCrop',\n                    crop_size=(512, 512),\n                    cat_max_ratio=0.75),\n                dict(type='RandomFlip', prob=0.5),\n                dict(\n                    type='Normalize',\n                    mean=[123.675, 116.28, 103.53],\n                    std=[58.395, 57.12, 57.375],\n                    to_rgb=True),\n                dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),\n                dict(type='DefaultFormatBundle'),\n                dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n            ]),\n        target=dict(\n            type='CityscapesDataset',\n            data_root='data/cityscapes/',\n            img_dir='leftImg8bit/train',\n            ann_dir='gtFine/train',\n            pipeline=[\n                dict(type='LoadImageFromFile'),\n                dict(type='LoadAnnotations'),\n                dict(type='Resize', img_scale=(1024, 512)),\n                dict(type='RandomCrop', crop_size=(512, 512)),\n                dict(type='RandomFlip', prob=0.5),\n                dict(\n                    type='Normalize',\n                    mean=[123.675, 116.28, 103.53],\n                    std=[58.395, 57.12, 57.375],\n                    to_rgb=True),\n                dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),\n                dict(type='DefaultFormatBundle'),\n                dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n            ]),\n        rare_class_sampling=dict(\n            min_pixels=3000, class_temp=0.01, min_crop_ratio=0.5)),\n    val=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nuda = dict(\n    type='DACS',\n    alpha=0.999,\n    pseudo_threshold=0.968,\n    pseudo_weight_ignore_top=15,\n    pseudo_weight_ignore_bottom=120,\n    imnet_feature_dist_lambda=0.005,\n    imnet_feature_dist_classes=[6, 7, 11, 12, 13, 14, 15, 16, 17, 18],\n    imnet_feature_dist_scale_min_ratio=0.75,\n    mix='class',\n    blur=True,\n    color_jitter_strength=0.2,\n    color_jitter_probability=0.2,\n    debug_img_interval=1000,\n    print_grad_magnitude=False,\n    tar_aug='',\n    weight=2,\n    dropout=0.5,\n    thre='same',\n    bata=0.1,\n    gamar=-5,\n    model=dict(\n        type='EncoderDecoder',\n        pretrained='pretrained/mit_b5.pth',\n        backbone=dict(type='mit_b5', style='pytorch'),\n        decode_head=dict(\n            type='DAFormerHead',\n            in_channels=[64, 128, 320, 512],\n            in_index=[0, 1, 2, 3],\n            channels=256,\n            dropout_ratio=0.1,\n            num_classes=19,\n            norm_cfg=dict(type='BN', requires_grad=True),\n            align_corners=False,\n            decoder_params=dict(\n                embed_dims=256,\n                embed_cfg=dict(type='mlp', act_cfg=None, norm_cfg=None),\n                embed_neck_cfg=dict(type='mlp', act_cfg=None, norm_cfg=None),\n                fusion_cfg=dict(\n                    type='aspp',\n                    sep=True,\n                    dilations=(1, 6, 12, 18),\n                    pool=False,\n                    act_cfg=dict(type='ReLU'),\n                    norm_cfg=dict(type='BN', requires_grad=True))),\n            loss_decode=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n        train_cfg=dict(\n            work_dir=\n            'work_dirs/local-basic/230712_2210_gta2cs_uda_warm_fdthings_rcs_croppl_a999_daformer_mitb5_s0_f3d56'\n        ),\n        test_cfg=dict(mode='whole')),\n    max_iters=40000)\nuse_ddp_wrapper = True\noptimizer = dict(\n    type='AdamW',\n    lr=6e-05,\n    betas=(0.9, 0.999),\n    weight_decay=0.01,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            head=dict(lr_mult=10.0),\n            pos_block=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = None\nlr_config = dict(\n    policy='poly',\n    warmup='linear',\n    warmup_iters=1500,\n    warmup_ratio=1e-06,\n    power=1.0,\n    min_lr=0.0,\n    by_epoch=False)\nseed = 0\nn_gpus = 1\nrunner = dict(type='IterBasedRunner', max_iters=40000)\ncheckpoint_config = dict(by_epoch=False, interval=40000, max_keep_ckpts=1)\nevaluation = dict(interval=4000, metric='mIoU')\nname = '230712_2210_gta2cs_uda_warm_fdthings_rcs_croppl_a999_daformer_mitb5_s0_f3d56'\nexp = 'basic'\nname_dataset = 'gta2cityscapes'\nname_architecture = 'daformer_sepaspp_mitb5'\nname_encoder = 'mitb5'\nname_decoder = 'daformer_sepaspp'\nname_uda = 'dacs_a999_fd_things_rcs0.01_cpl'\nname_opt = 'adamw_6e-05_pmTrue_poly10warm_1x2_40k'\nwork_dir = 'work_dirs/local-basic/230712_2210_gta2cs_uda_warm_fdthings_rcs_croppl_a999_daformer_mitb5_s0_f3d56'\ngit_rev = '6d87ab857665f3c5a4b481c1da3fb5e227792830'\ngpu_ids = range(0, 1)\n", "CLASSES": ["road", "sidewalk", "building", "wall", "fence", "pole", "traffic light", "traffic sign", "vegetation", "terrain", "sky", "person", "rider", "car", "truck", "bus", "train", "motorcycle", "bicycle"], "PALETTE": [[128, 64, 128], [244, 35, 232], [70, 70, 70], [102, 102, 156], [190, 153, 153], [153, 153, 153], [250, 170, 30], [220, 220, 0], [107, 142, 35], [152, 251, 152], [70, 130, 180], [220, 20, 60], [255, 0, 0], [0, 0, 142], [0, 0, 70], [0, 60, 100], [0, 80, 100], [0, 0, 230], [119, 11, 32]]}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.0, "memory": 9814, "data_time": 0.03514, "decode.loss_seg": 2.68598, "decode.acc_seg": 10.29411, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 1.40595, "mix.decode.acc_seg": 18.9535, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 19.42104, "time": 1.56345}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.0, "memory": 9814, "data_time": 0.02259, "decode.loss_seg": 2.38463, "decode.acc_seg": 47.62058, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 1.32109, "mix.decode.acc_seg": 41.75207, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 29.80046, "time": 1.49076}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 1e-05, "memory": 9814, "data_time": 0.02111, "decode.loss_seg": 2.02829, "decode.acc_seg": 62.98117, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 1.05896, "mix.decode.acc_seg": 59.35251, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 50.97396, "time": 1.45047}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 1e-05, "memory": 9814, "data_time": 0.02131, "decode.loss_seg": 1.60035, "decode.acc_seg": 68.13205, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.77551, "mix.decode.acc_seg": 68.87679, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 65.64424, "time": 1.44759}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 1e-05, "memory": 9814, "data_time": 0.02147, "decode.loss_seg": 1.30181, "decode.acc_seg": 68.9157, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.65482, "mix.decode.acc_seg": 70.83888, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 69.71637, "time": 1.46593}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 1e-05, "memory": 9814, "data_time": 0.0211, "decode.loss_seg": 1.09471, "decode.acc_seg": 70.46148, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.57765, "mix.decode.acc_seg": 72.8004, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 69.44675, "time": 1.44863}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 1e-05, "memory": 9814, "data_time": 0.02141, "decode.loss_seg": 0.95552, "decode.acc_seg": 71.3839, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.50466, "mix.decode.acc_seg": 74.70888, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 70.05016, "time": 1.46287}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 2e-05, "memory": 9814, "data_time": 0.02089, "decode.loss_seg": 0.82314, "decode.acc_seg": 74.03493, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.3868, "mix.decode.acc_seg": 77.30253, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 76.64023, "time": 1.45888}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 2e-05, "memory": 9814, "data_time": 0.02107, "decode.loss_seg": 0.76436, "decode.acc_seg": 73.78409, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.39749, "mix.decode.acc_seg": 75.41724, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 76.60675, "time": 1.46235}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 2e-05, "memory": 9814, "data_time": 0.02144, "decode.loss_seg": 0.74411, "decode.acc_seg": 73.01512, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.36756, "mix.decode.acc_seg": 75.1034, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 76.9748, "time": 1.4677}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 2e-05, "memory": 9814, "data_time": 0.02673, "decode.loss_seg": 0.74226, "decode.acc_seg": 72.57671, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.40854, "mix.decode.acc_seg": 75.12338, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 78.37175, "time": 1.47566}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 2e-05, "memory": 9814, "data_time": 0.02087, "decode.loss_seg": 0.64822, "decode.acc_seg": 72.63267, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.36967, "mix.decode.acc_seg": 73.73298, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 73.82213, "time": 1.45265}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 3e-05, "memory": 9814, "data_time": 0.02145, "decode.loss_seg": 0.58957, "decode.acc_seg": 75.66901, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.3006, "mix.decode.acc_seg": 77.67801, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 75.30673, "time": 1.47203}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 3e-05, "memory": 9814, "data_time": 0.02096, "decode.loss_seg": 0.51312, "decode.acc_seg": 80.67467, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.28953, "mix.decode.acc_seg": 78.77021, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 76.18435, "time": 1.46773}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 3e-05, "memory": 9814, "data_time": 0.02187, "decode.loss_seg": 0.47294, "decode.acc_seg": 79.92265, "src.loss_imnet_feat_dist": 0.10727, "mix.decode.loss_seg": 0.24365, "mix.decode.acc_seg": 79.14441, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 71.09806, "time": 1.46991}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 3e-05, "memory": 9814, "data_time": 0.02184, "decode.loss_seg": 0.49927, "decode.acc_seg": 76.04611, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.28178, "mix.decode.acc_seg": 74.36548, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 63.88804, "time": 1.46215}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 3e-05, "memory": 9814, "data_time": 0.02087, "decode.loss_seg": 0.44855, "decode.acc_seg": 79.55902, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.2524, "mix.decode.acc_seg": 80.16452, "consistency.decode.loss_seg": 1e-05, "consistency.decode.acc_seg": 63.5131, "time": 1.45417}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 4e-05, "memory": 9814, "data_time": 0.02043, "decode.loss_seg": 0.47907, "decode.acc_seg": 77.75058, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.2745, "mix.decode.acc_seg": 75.7077, "consistency.decode.loss_seg": 2e-05, "consistency.decode.acc_seg": 72.4172, "time": 1.46324}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 4e-05, "memory": 9814, "data_time": 0.02044, "decode.loss_seg": 0.44659, "decode.acc_seg": 81.30625, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.23115, "mix.decode.acc_seg": 74.36639, "consistency.decode.loss_seg": 3e-05, "consistency.decode.acc_seg": 73.70268, "time": 1.45928}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 4e-05, "memory": 9814, "data_time": 0.02026, "decode.loss_seg": 0.37638, "decode.acc_seg": 80.7914, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.20344, "mix.decode.acc_seg": 79.51609, "consistency.decode.loss_seg": 5e-05, "consistency.decode.acc_seg": 64.82557, "time": 1.4497}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 4e-05, "memory": 9814, "data_time": 0.02173, "decode.loss_seg": 0.37438, "decode.acc_seg": 81.67998, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.20153, "mix.decode.acc_seg": 79.23335, "consistency.decode.loss_seg": 9e-05, "consistency.decode.acc_seg": 68.67668, "time": 1.49841}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 4e-05, "memory": 9814, "data_time": 0.0228, "decode.loss_seg": 0.42929, "decode.acc_seg": 78.76181, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.24312, "mix.decode.acc_seg": 75.50976, "consistency.decode.loss_seg": 0.0013, "consistency.decode.acc_seg": 60.57366, "time": 1.4571}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 4e-05, "memory": 9814, "data_time": 0.02337, "decode.loss_seg": 0.37637, "decode.acc_seg": 81.57565, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.18706, "mix.decode.acc_seg": 77.48083, "consistency.decode.loss_seg": 0.00051, "consistency.decode.acc_seg": 64.15568, "time": 1.46973}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 5e-05, "memory": 9814, "data_time": 0.02284, "decode.loss_seg": 0.28323, "decode.acc_seg": 83.81314, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.17974, "mix.decode.acc_seg": 80.42791, "consistency.decode.loss_seg": 0.00062, "consistency.decode.acc_seg": 66.24816, "time": 1.47343}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 5e-05, "memory": 9814, "data_time": 0.0227, "decode.loss_seg": 0.28173, "decode.acc_seg": 83.0196, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.17128, "mix.decode.acc_seg": 80.68592, "consistency.decode.loss_seg": 0.00027, "consistency.decode.acc_seg": 76.57734, "time": 1.46401}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 5e-05, "memory": 9814, "data_time": 0.0228, "decode.loss_seg": 0.30811, "decode.acc_seg": 84.11965, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.17155, "mix.decode.acc_seg": 81.63896, "consistency.decode.loss_seg": 0.0003, "consistency.decode.acc_seg": 78.97945, "time": 1.47076}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 5e-05, "memory": 9814, "data_time": 0.02417, "decode.loss_seg": 0.34626, "decode.acc_seg": 81.74381, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.18923, "mix.decode.acc_seg": 80.83327, "consistency.decode.loss_seg": 0.00075, "consistency.decode.acc_seg": 73.38401, "time": 1.48424}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 5e-05, "memory": 9814, "data_time": 0.02423, "decode.loss_seg": 0.2321, "decode.acc_seg": 85.13242, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.15916, "mix.decode.acc_seg": 81.71635, "consistency.decode.loss_seg": 0.00045, "consistency.decode.acc_seg": 79.89809, "time": 1.48822}
{"mode": "train", "epoch": 1, "iter": 1450, "lr": 6e-05, "memory": 9814, "data_time": 0.02375, "decode.loss_seg": 0.27005, "decode.acc_seg": 84.14138, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.18733, "mix.decode.acc_seg": 81.30726, "consistency.decode.loss_seg": 0.00087, "consistency.decode.acc_seg": 79.52579, "time": 1.47372}
{"mode": "train", "epoch": 1, "iter": 1500, "lr": 6e-05, "memory": 9814, "data_time": 0.02338, "decode.loss_seg": 0.43752, "decode.acc_seg": 77.78874, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.3079, "mix.decode.acc_seg": 75.32698, "consistency.decode.loss_seg": 0.01367, "consistency.decode.acc_seg": 45.86409, "time": 1.47895}
{"mode": "train", "epoch": 1, "iter": 1550, "lr": 6e-05, "memory": 9814, "data_time": 0.02261, "decode.loss_seg": 0.33136, "decode.acc_seg": 82.76279, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.21691, "mix.decode.acc_seg": 79.63254, "consistency.decode.loss_seg": 0.00492, "consistency.decode.acc_seg": 64.83095, "time": 1.46577}
{"mode": "train", "epoch": 1, "iter": 1600, "lr": 6e-05, "memory": 9814, "data_time": 0.02224, "decode.loss_seg": 0.39074, "decode.acc_seg": 78.62954, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.26211, "mix.decode.acc_seg": 77.81701, "consistency.decode.loss_seg": 0.00273, "consistency.decode.acc_seg": 80.55358, "time": 1.45889}
{"mode": "train", "epoch": 1, "iter": 1650, "lr": 6e-05, "memory": 9814, "data_time": 0.02191, "decode.loss_seg": 0.27849, "decode.acc_seg": 84.33181, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.18833, "mix.decode.acc_seg": 83.68201, "consistency.decode.loss_seg": 0.00168, "consistency.decode.acc_seg": 83.69005, "time": 1.46443}
{"mode": "train", "epoch": 1, "iter": 1700, "lr": 6e-05, "memory": 9814, "data_time": 0.02227, "decode.loss_seg": 0.34315, "decode.acc_seg": 81.91105, "src.loss_imnet_feat_dist": 0.12374, "mix.decode.loss_seg": 0.26138, "mix.decode.acc_seg": 82.85493, "consistency.decode.loss_seg": 0.00323, "consistency.decode.acc_seg": 81.55018, "time": 1.46155}
{"mode": "train", "epoch": 1, "iter": 1750, "lr": 6e-05, "memory": 9814, "data_time": 0.02311, "decode.loss_seg": 0.31474, "decode.acc_seg": 82.78263, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.23569, "mix.decode.acc_seg": 82.00095, "consistency.decode.loss_seg": 0.00275, "consistency.decode.acc_seg": 82.77493, "time": 1.4723}
{"mode": "train", "epoch": 1, "iter": 1800, "lr": 6e-05, "memory": 9814, "data_time": 0.02478, "decode.loss_seg": 0.26262, "decode.acc_seg": 84.02754, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.22841, "mix.decode.acc_seg": 82.39199, "consistency.decode.loss_seg": 0.00438, "consistency.decode.acc_seg": 82.93814, "time": 1.48651}
{"mode": "train", "epoch": 1, "iter": 1850, "lr": 6e-05, "memory": 9814, "data_time": 0.0248, "decode.loss_seg": 0.26323, "decode.acc_seg": 84.79508, "src.loss_imnet_feat_dist": 0.12944, "mix.decode.loss_seg": 0.21138, "mix.decode.acc_seg": 83.54893, "consistency.decode.loss_seg": 0.00329, "consistency.decode.acc_seg": 82.92601, "time": 1.49134}
{"mode": "train", "epoch": 1, "iter": 1900, "lr": 6e-05, "memory": 9814, "data_time": 0.02395, "decode.loss_seg": 0.29826, "decode.acc_seg": 82.8725, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.23206, "mix.decode.acc_seg": 83.36162, "consistency.decode.loss_seg": 0.00403, "consistency.decode.acc_seg": 84.10811, "time": 1.48166}
{"mode": "train", "epoch": 1, "iter": 1950, "lr": 6e-05, "memory": 9814, "data_time": 0.02256, "decode.loss_seg": 0.36349, "decode.acc_seg": 81.93215, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.23519, "mix.decode.acc_seg": 82.77136, "consistency.decode.loss_seg": 0.00325, "consistency.decode.acc_seg": 85.99696, "time": 1.46431}
{"mode": "train", "epoch": 1, "iter": 2000, "lr": 6e-05, "memory": 9814, "data_time": 0.02479, "decode.loss_seg": 0.25924, "decode.acc_seg": 83.25171, "src.loss_imnet_feat_dist": 0.12609, "mix.decode.loss_seg": 0.20237, "mix.decode.acc_seg": 85.06862, "consistency.decode.loss_seg": 0.00287, "consistency.decode.acc_seg": 87.74501, "time": 1.487}
{"mode": "train", "epoch": 1, "iter": 2050, "lr": 6e-05, "memory": 9814, "data_time": 0.0208, "decode.loss_seg": 0.22642, "decode.acc_seg": 84.48139, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.2066, "mix.decode.acc_seg": 83.0068, "consistency.decode.loss_seg": 0.00372, "consistency.decode.acc_seg": 86.92077, "time": 1.49665}
{"mode": "train", "epoch": 1, "iter": 2100, "lr": 6e-05, "memory": 9814, "data_time": 0.01982, "decode.loss_seg": 0.21426, "decode.acc_seg": 84.40105, "src.loss_imnet_feat_dist": 0.12006, "mix.decode.loss_seg": 0.17734, "mix.decode.acc_seg": 85.87936, "consistency.decode.loss_seg": 0.0026, "consistency.decode.acc_seg": 88.08086, "time": 1.45176}
{"mode": "train", "epoch": 1, "iter": 2150, "lr": 6e-05, "memory": 9814, "data_time": 0.02297, "decode.loss_seg": 0.24066, "decode.acc_seg": 84.83371, "src.loss_imnet_feat_dist": 0.11754, "mix.decode.loss_seg": 0.18727, "mix.decode.acc_seg": 86.198, "consistency.decode.loss_seg": 0.00294, "consistency.decode.acc_seg": 88.22334, "time": 1.48109}
{"mode": "train", "epoch": 1, "iter": 2200, "lr": 6e-05, "memory": 9814, "data_time": 0.02081, "decode.loss_seg": 0.22426, "decode.acc_seg": 84.91013, "src.loss_imnet_feat_dist": 0.11959, "mix.decode.loss_seg": 0.19366, "mix.decode.acc_seg": 85.12755, "consistency.decode.loss_seg": 0.00451, "consistency.decode.acc_seg": 88.09242, "time": 1.45898}
