{"env_info": "sys.platform: linux\nPython: 3.6.9 (default, Jan 26 2021, 15:33:00) [GCC 8.4.0]\nCUDA available: True\nGPU 0: Tesla V100-SXM2-16GB\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 10.2, V10.2.89\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.8.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.2\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70\n  - CuDNN 7.6.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.2, CUDNN_VERSION=7.6.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.0\nOpenCV: 4.4.0\nMMCV: 1.3.7\nMMCV Compiler: GCC 7.5\nMMCV CUDA Compiler: 10.2\nMMSegmentation: 0.16.0+6d87ab8", "seed": 0, "exp_name": "230722_1644_gta2cs_uda_warm_fdthings_rcs_croppl_a999_daformer_mitb5_s0_19c97", "mmseg_version": "0.16.0+6d87ab8", "config": "log_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\nnorm_cfg = dict(type='BN', requires_grad=True)\nfind_unused_parameters = True\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained='pretrained/mit_b5.pth',\n    backbone=dict(type='mit_b5', style='pytorch'),\n    decode_head=dict(\n        type='DAFormerHead',\n        in_channels=[64, 128, 320, 512],\n        in_index=[0, 1, 2, 3],\n        channels=256,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        align_corners=False,\n        decoder_params=dict(\n            embed_dims=256,\n            embed_cfg=dict(type='mlp', act_cfg=None, norm_cfg=None),\n            embed_neck_cfg=dict(type='mlp', act_cfg=None, norm_cfg=None),\n            fusion_cfg=dict(\n                type='aspp',\n                sep=True,\n                dilations=(1, 6, 12, 18),\n                pool=False,\n                act_cfg=dict(type='ReLU'),\n                norm_cfg=dict(type='BN', requires_grad=True))),\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    train_cfg=dict(\n        work_dir=\n        'work_dirs/local-basic/230722_1644_gta2cs_uda_warm_fdthings_rcs_croppl_a999_daformer_mitb5_s0_19c97'\n    ),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'CityscapesDataset'\ndata_root = 'data/cityscapes/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (512, 512)\ngta_train_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(1280, 720)),\n    dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ncityscapes_train_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(1024, 512)),\n    dict(type='RandomCrop', crop_size=(512, 512)),\n    dict(type='RandomFlip', prob=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 512),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=4,\n    train=dict(\n        type='UDADataset',\n        source=dict(\n            type='GTADataset',\n            data_root='data/gta/',\n            img_dir='images',\n            ann_dir='labels',\n            pipeline=[\n                dict(type='LoadImageFromFile'),\n                dict(type='LoadAnnotations'),\n                dict(type='Resize', img_scale=(1280, 720)),\n                dict(\n                    type='RandomCrop',\n                    crop_size=(512, 512),\n                    cat_max_ratio=0.75),\n                dict(type='RandomFlip', prob=0.5),\n                dict(\n                    type='Normalize',\n                    mean=[123.675, 116.28, 103.53],\n                    std=[58.395, 57.12, 57.375],\n                    to_rgb=True),\n                dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),\n                dict(type='DefaultFormatBundle'),\n                dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n            ]),\n        target=dict(\n            type='CityscapesDataset',\n            data_root='data/cityscapes/',\n            img_dir='leftImg8bit/train',\n            ann_dir='gtFine/train',\n            pipeline=[\n                dict(type='LoadImageFromFile'),\n                dict(type='LoadAnnotations'),\n                dict(type='Resize', img_scale=(1024, 512)),\n                dict(type='RandomCrop', crop_size=(512, 512)),\n                dict(type='RandomFlip', prob=0.5),\n                dict(\n                    type='Normalize',\n                    mean=[123.675, 116.28, 103.53],\n                    std=[58.395, 57.12, 57.375],\n                    to_rgb=True),\n                dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),\n                dict(type='DefaultFormatBundle'),\n                dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n            ]),\n        rare_class_sampling=dict(\n            min_pixels=3000, class_temp=0.01, min_crop_ratio=0.5)),\n    val=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nuda = dict(\n    type='DACS',\n    alpha=0.999,\n    pseudo_threshold=0.968,\n    pseudo_weight_ignore_top=15,\n    pseudo_weight_ignore_bottom=120,\n    imnet_feature_dist_lambda=0.005,\n    imnet_feature_dist_classes=[6, 7, 11, 12, 13, 14, 15, 16, 17, 18],\n    imnet_feature_dist_scale_min_ratio=0.75,\n    mix='class',\n    blur=True,\n    color_jitter_strength=0.2,\n    color_jitter_probability=0.2,\n    debug_img_interval=1000,\n    print_grad_magnitude=False,\n    tar_aug='',\n    weight=1,\n    dropout=0.1,\n    thre='',\n    bata=0.2,\n    gamar=-2,\n    model=dict(\n        type='EncoderDecoder',\n        pretrained='pretrained/mit_b5.pth',\n        backbone=dict(type='mit_b5', style='pytorch'),\n        decode_head=dict(\n            type='DAFormerHead',\n            in_channels=[64, 128, 320, 512],\n            in_index=[0, 1, 2, 3],\n            channels=256,\n            dropout_ratio=0.1,\n            num_classes=19,\n            norm_cfg=dict(type='BN', requires_grad=True),\n            align_corners=False,\n            decoder_params=dict(\n                embed_dims=256,\n                embed_cfg=dict(type='mlp', act_cfg=None, norm_cfg=None),\n                embed_neck_cfg=dict(type='mlp', act_cfg=None, norm_cfg=None),\n                fusion_cfg=dict(\n                    type='aspp',\n                    sep=True,\n                    dilations=(1, 6, 12, 18),\n                    pool=False,\n                    act_cfg=dict(type='ReLU'),\n                    norm_cfg=dict(type='BN', requires_grad=True))),\n            loss_decode=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n        train_cfg=dict(\n            work_dir=\n            'work_dirs/local-basic/230722_1644_gta2cs_uda_warm_fdthings_rcs_croppl_a999_daformer_mitb5_s0_19c97'\n        ),\n        test_cfg=dict(mode='whole')),\n    max_iters=40000)\nuse_ddp_wrapper = True\noptimizer = dict(\n    type='AdamW',\n    lr=6e-05,\n    betas=(0.9, 0.999),\n    weight_decay=0.01,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            head=dict(lr_mult=10.0),\n            pos_block=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = None\nlr_config = dict(\n    policy='poly',\n    warmup='linear',\n    warmup_iters=1500,\n    warmup_ratio=1e-06,\n    power=1.0,\n    min_lr=0.0,\n    by_epoch=False)\nseed = 0\nn_gpus = 1\nrunner = dict(type='IterBasedRunner', max_iters=40000)\ncheckpoint_config = dict(by_epoch=False, interval=40000, max_keep_ckpts=1)\nevaluation = dict(interval=4000, metric='mIoU')\nname = '230722_1644_gta2cs_uda_warm_fdthings_rcs_croppl_a999_daformer_mitb5_s0_19c97'\nexp = 'basic'\nname_dataset = 'gta2cityscapes'\nname_architecture = 'daformer_sepaspp_mitb5'\nname_encoder = 'mitb5'\nname_decoder = 'daformer_sepaspp'\nname_uda = 'dacs_a999_fd_things_rcs0.01_cpl'\nname_opt = 'adamw_6e-05_pmTrue_poly10warm_1x2_40k'\nwork_dir = 'work_dirs/local-basic/230722_1644_gta2cs_uda_warm_fdthings_rcs_croppl_a999_daformer_mitb5_s0_19c97'\ngit_rev = '6d87ab857665f3c5a4b481c1da3fb5e227792830'\ngpu_ids = range(0, 1)\n", "CLASSES": ["road", "sidewalk", "building", "wall", "fence", "pole", "traffic light", "traffic sign", "vegetation", "terrain", "sky", "person", "rider", "car", "truck", "bus", "train", "motorcycle", "bicycle"], "PALETTE": [[128, 64, 128], [244, 35, 232], [70, 70, 70], [102, 102, 156], [190, 153, 153], [153, 153, 153], [250, 170, 30], [220, 220, 0], [107, 142, 35], [152, 251, 152], [70, 130, 180], [220, 20, 60], [255, 0, 0], [0, 0, 142], [0, 0, 70], [0, 60, 100], [0, 80, 100], [0, 0, 230], [119, 11, 32]]}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.0, "memory": 9809, "data_time": 0.02875, "decode.loss_seg": 2.69099, "decode.acc_seg": 9.22923, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 1.41461, "mix.decode.acc_seg": 11.58307, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 25.22584, "time": 1.38315}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.0, "memory": 9809, "data_time": 0.01898, "decode.loss_seg": 2.41275, "decode.acc_seg": 45.55825, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 1.3784, "mix.decode.acc_seg": 33.02198, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 32.87696, "time": 1.31483}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 1e-05, "memory": 9809, "data_time": 0.01874, "decode.loss_seg": 2.07487, "decode.acc_seg": 61.33176, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 1.15357, "mix.decode.acc_seg": 51.25425, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 53.45071, "time": 1.32054}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 1e-05, "memory": 9809, "data_time": 0.01913, "decode.loss_seg": 1.64742, "decode.acc_seg": 66.29988, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.91551, "mix.decode.acc_seg": 59.94817, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 71.96941, "time": 1.32243}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 1e-05, "memory": 9809, "data_time": 0.01859, "decode.loss_seg": 1.34775, "decode.acc_seg": 67.59495, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.79463, "mix.decode.acc_seg": 63.69214, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 74.34322, "time": 1.32134}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 1e-05, "memory": 9811, "data_time": 0.01884, "decode.loss_seg": 1.13615, "decode.acc_seg": 69.60535, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.76712, "mix.decode.acc_seg": 65.37851, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 74.63534, "time": 1.32199}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 1e-05, "memory": 9811, "data_time": 0.01878, "decode.loss_seg": 1.00328, "decode.acc_seg": 70.36437, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.72261, "mix.decode.acc_seg": 63.74708, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 76.11115, "time": 1.32305}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 2e-05, "memory": 9811, "data_time": 0.01904, "decode.loss_seg": 0.87952, "decode.acc_seg": 72.96059, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.63377, "mix.decode.acc_seg": 64.60668, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 78.39447, "time": 1.32868}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 2e-05, "memory": 9811, "data_time": 0.01884, "decode.loss_seg": 0.82093, "decode.acc_seg": 72.27268, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.67923, "mix.decode.acc_seg": 61.83412, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 79.83855, "time": 1.32783}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 2e-05, "memory": 9811, "data_time": 0.01928, "decode.loss_seg": 0.80541, "decode.acc_seg": 71.63461, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.67386, "mix.decode.acc_seg": 61.36668, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 78.34306, "time": 1.33266}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 2e-05, "memory": 9811, "data_time": 0.01928, "decode.loss_seg": 0.80112, "decode.acc_seg": 71.02042, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.69933, "mix.decode.acc_seg": 61.41244, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 80.65964, "time": 1.32424}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 2e-05, "memory": 9811, "data_time": 0.01911, "decode.loss_seg": 0.70914, "decode.acc_seg": 71.36831, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.70116, "mix.decode.acc_seg": 59.03703, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 79.07644, "time": 1.32795}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 3e-05, "memory": 9811, "data_time": 0.01899, "decode.loss_seg": 0.66285, "decode.acc_seg": 73.80787, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.66919, "mix.decode.acc_seg": 60.8019, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 78.56639, "time": 1.3267}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 3e-05, "memory": 9811, "data_time": 0.01861, "decode.loss_seg": 0.59, "decode.acc_seg": 78.41172, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.78701, "mix.decode.acc_seg": 57.42373, "consistency.decode.loss_seg": 1e-05, "consistency.decode.acc_seg": 79.49744, "time": 1.32354}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 3e-05, "memory": 9811, "data_time": 0.0193, "decode.loss_seg": 0.54554, "decode.acc_seg": 78.02781, "src.loss_imnet_feat_dist": 0.09949, "mix.decode.loss_seg": 0.62402, "mix.decode.acc_seg": 61.58703, "consistency.decode.loss_seg": 1e-05, "consistency.decode.acc_seg": 80.94644, "time": 1.33735}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 3e-05, "memory": 9811, "data_time": 0.019, "decode.loss_seg": 0.55466, "decode.acc_seg": 74.78477, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.6216, "mix.decode.acc_seg": 58.65034, "consistency.decode.loss_seg": 2e-05, "consistency.decode.acc_seg": 76.74015, "time": 1.32879}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 3e-05, "memory": 9811, "data_time": 0.01947, "decode.loss_seg": 0.49157, "decode.acc_seg": 78.2692, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.67963, "mix.decode.acc_seg": 60.1055, "consistency.decode.loss_seg": 0.0001, "consistency.decode.acc_seg": 79.19556, "time": 1.32695}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 4e-05, "memory": 9811, "data_time": 0.01888, "decode.loss_seg": 0.52984, "decode.acc_seg": 76.87693, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.71204, "mix.decode.acc_seg": 59.46656, "consistency.decode.loss_seg": 0.00028, "consistency.decode.acc_seg": 81.40525, "time": 1.32407}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 4e-05, "memory": 9811, "data_time": 0.01938, "decode.loss_seg": 0.50931, "decode.acc_seg": 79.71647, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.57142, "mix.decode.acc_seg": 60.66095, "consistency.decode.loss_seg": 0.00054, "consistency.decode.acc_seg": 77.67225, "time": 1.33468}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 4e-05, "memory": 9811, "data_time": 0.01917, "decode.loss_seg": 0.42555, "decode.acc_seg": 80.16573, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.64393, "mix.decode.acc_seg": 61.84578, "consistency.decode.loss_seg": 0.00077, "consistency.decode.acc_seg": 78.84341, "time": 1.32632}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 4e-05, "memory": 9811, "data_time": 0.01915, "decode.loss_seg": 0.41676, "decode.acc_seg": 80.49321, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.64786, "mix.decode.acc_seg": 61.84651, "consistency.decode.loss_seg": 0.00158, "consistency.decode.acc_seg": 77.77031, "time": 1.35054}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 4e-05, "memory": 9811, "data_time": 0.01926, "decode.loss_seg": 0.4747, "decode.acc_seg": 77.63622, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.66809, "mix.decode.acc_seg": 56.84416, "consistency.decode.loss_seg": 0.00556, "consistency.decode.acc_seg": 76.93839, "time": 1.35149}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 4e-05, "memory": 9811, "data_time": 0.02005, "decode.loss_seg": 0.41398, "decode.acc_seg": 80.99497, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.56668, "mix.decode.acc_seg": 57.83252, "consistency.decode.loss_seg": 0.00618, "consistency.decode.acc_seg": 82.83221, "time": 1.32935}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 5e-05, "memory": 9811, "data_time": 0.01997, "decode.loss_seg": 0.31274, "decode.acc_seg": 83.38902, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.56619, "mix.decode.acc_seg": 60.82249, "consistency.decode.loss_seg": 0.00825, "consistency.decode.acc_seg": 85.00504, "time": 1.32866}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 5e-05, "memory": 9811, "data_time": 0.01951, "decode.loss_seg": 0.3188, "decode.acc_seg": 82.25782, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.58937, "mix.decode.acc_seg": 60.59161, "consistency.decode.loss_seg": 0.00743, "consistency.decode.acc_seg": 87.97715, "time": 1.32607}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 5e-05, "memory": 9811, "data_time": 0.01946, "decode.loss_seg": 0.33936, "decode.acc_seg": 83.42161, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.62745, "mix.decode.acc_seg": 57.84972, "consistency.decode.loss_seg": 0.00702, "consistency.decode.acc_seg": 89.98355, "time": 1.32633}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 5e-05, "memory": 9811, "data_time": 0.01944, "decode.loss_seg": 0.38963, "decode.acc_seg": 80.59181, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.63486, "mix.decode.acc_seg": 59.14088, "consistency.decode.loss_seg": 0.01163, "consistency.decode.acc_seg": 88.66887, "time": 1.32615}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 5e-05, "memory": 9811, "data_time": 0.01971, "decode.loss_seg": 0.27765, "decode.acc_seg": 83.98872, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.67054, "mix.decode.acc_seg": 59.15633, "consistency.decode.loss_seg": 0.01261, "consistency.decode.acc_seg": 88.02984, "time": 1.32748}
{"mode": "train", "epoch": 1, "iter": 1450, "lr": 6e-05, "memory": 9811, "data_time": 0.01961, "decode.loss_seg": 0.29034, "decode.acc_seg": 83.91863, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.62629, "mix.decode.acc_seg": 59.44219, "consistency.decode.loss_seg": 0.01977, "consistency.decode.acc_seg": 89.02908, "time": 1.32997}
{"mode": "train", "epoch": 1, "iter": 1500, "lr": 6e-05, "memory": 9811, "data_time": 0.01989, "decode.loss_seg": 0.32334, "decode.acc_seg": 81.9955, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.64509, "mix.decode.acc_seg": 59.05556, "consistency.decode.loss_seg": 0.02354, "consistency.decode.acc_seg": 88.26277, "time": 1.33414}
{"mode": "train", "epoch": 1, "iter": 1550, "lr": 6e-05, "memory": 9811, "data_time": 0.01954, "decode.loss_seg": 0.33315, "decode.acc_seg": 82.87585, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.57862, "mix.decode.acc_seg": 61.7468, "consistency.decode.loss_seg": 0.02003, "consistency.decode.acc_seg": 89.19611, "time": 1.32969}
{"mode": "train", "epoch": 1, "iter": 1600, "lr": 6e-05, "memory": 9811, "data_time": 0.02023, "decode.loss_seg": 0.39341, "decode.acc_seg": 79.13711, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.67085, "mix.decode.acc_seg": 57.18013, "consistency.decode.loss_seg": 0.02389, "consistency.decode.acc_seg": 88.33804, "time": 1.34388}
{"mode": "train", "epoch": 1, "iter": 1650, "lr": 6e-05, "memory": 9811, "data_time": 0.01949, "decode.loss_seg": 0.28974, "decode.acc_seg": 84.13436, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.5839, "mix.decode.acc_seg": 62.20205, "consistency.decode.loss_seg": 0.02312, "consistency.decode.acc_seg": 91.40201, "time": 1.33165}
{"mode": "train", "epoch": 1, "iter": 1700, "lr": 6e-05, "memory": 9811, "data_time": 0.01948, "decode.loss_seg": 0.338, "decode.acc_seg": 82.24285, "src.loss_imnet_feat_dist": 0.11745, "mix.decode.loss_seg": 0.71543, "mix.decode.acc_seg": 57.80282, "consistency.decode.loss_seg": 0.02218, "consistency.decode.acc_seg": 91.84275, "time": 1.3332}
{"mode": "train", "epoch": 1, "iter": 1750, "lr": 6e-05, "memory": 9811, "data_time": 0.01986, "decode.loss_seg": 0.34036, "decode.acc_seg": 82.16737, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.78046, "mix.decode.acc_seg": 54.72289, "consistency.decode.loss_seg": 0.03479, "consistency.decode.acc_seg": 88.6777, "time": 1.33799}
{"mode": "train", "epoch": 1, "iter": 1800, "lr": 6e-05, "memory": 9811, "data_time": 0.01937, "decode.loss_seg": 0.27308, "decode.acc_seg": 83.99858, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.68597, "mix.decode.acc_seg": 58.9019, "consistency.decode.loss_seg": 0.03073, "consistency.decode.acc_seg": 91.31874, "time": 1.32855}
