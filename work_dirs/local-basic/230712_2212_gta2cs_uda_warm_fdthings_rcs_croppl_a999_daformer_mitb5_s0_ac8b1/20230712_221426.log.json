{"env_info": "sys.platform: linux\nPython: 3.6.9 (default, Jan 26 2021, 15:33:00) [GCC 8.4.0]\nCUDA available: True\nGPU 0: Tesla V100-SXM2-16GB\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 10.2, V10.2.89\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.7.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.2\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75\n  - CuDNN 7.6.5\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.2\nOpenCV: 4.4.0\nMMCV: 1.3.7\nMMCV Compiler: GCC 7.5\nMMCV CUDA Compiler: 10.2\nMMSegmentation: 0.16.0+6d87ab8", "seed": 0, "exp_name": "230712_2212_gta2cs_uda_warm_fdthings_rcs_croppl_a999_daformer_mitb5_s0_ac8b1", "mmseg_version": "0.16.0+6d87ab8", "config": "log_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\nnorm_cfg = dict(type='BN', requires_grad=True)\nfind_unused_parameters = True\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained='pretrained/mit_b5.pth',\n    backbone=dict(type='mit_b5', style='pytorch'),\n    decode_head=dict(\n        type='DAFormerHead',\n        in_channels=[64, 128, 320, 512],\n        in_index=[0, 1, 2, 3],\n        channels=256,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        align_corners=False,\n        decoder_params=dict(\n            embed_dims=256,\n            embed_cfg=dict(type='mlp', act_cfg=None, norm_cfg=None),\n            embed_neck_cfg=dict(type='mlp', act_cfg=None, norm_cfg=None),\n            fusion_cfg=dict(\n                type='aspp',\n                sep=True,\n                dilations=(1, 6, 12, 18),\n                pool=False,\n                act_cfg=dict(type='ReLU'),\n                norm_cfg=dict(type='BN', requires_grad=True))),\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    train_cfg=dict(\n        work_dir=\n        'work_dirs/local-basic/230712_2212_gta2cs_uda_warm_fdthings_rcs_croppl_a999_daformer_mitb5_s0_ac8b1'\n    ),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'CityscapesDataset'\ndata_root = 'data/cityscapes/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (512, 512)\ngta_train_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(1280, 720)),\n    dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ncityscapes_train_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(1024, 512)),\n    dict(type='RandomCrop', crop_size=(512, 512)),\n    dict(type='RandomFlip', prob=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 512),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=4,\n    train=dict(\n        type='UDADataset',\n        source=dict(\n            type='GTADataset',\n            data_root='data/gta/',\n            img_dir='images',\n            ann_dir='labels',\n            pipeline=[\n                dict(type='LoadImageFromFile'),\n                dict(type='LoadAnnotations'),\n                dict(type='Resize', img_scale=(1280, 720)),\n                dict(\n                    type='RandomCrop',\n                    crop_size=(512, 512),\n                    cat_max_ratio=0.75),\n                dict(type='RandomFlip', prob=0.5),\n                dict(\n                    type='Normalize',\n                    mean=[123.675, 116.28, 103.53],\n                    std=[58.395, 57.12, 57.375],\n                    to_rgb=True),\n                dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),\n                dict(type='DefaultFormatBundle'),\n                dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n            ]),\n        target=dict(\n            type='CityscapesDataset',\n            data_root='data/cityscapes/',\n            img_dir='leftImg8bit/train',\n            ann_dir='gtFine/train',\n            pipeline=[\n                dict(type='LoadImageFromFile'),\n                dict(type='LoadAnnotations'),\n                dict(type='Resize', img_scale=(1024, 512)),\n                dict(type='RandomCrop', crop_size=(512, 512)),\n                dict(type='RandomFlip', prob=0.5),\n                dict(\n                    type='Normalize',\n                    mean=[123.675, 116.28, 103.53],\n                    std=[58.395, 57.12, 57.375],\n                    to_rgb=True),\n                dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),\n                dict(type='DefaultFormatBundle'),\n                dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n            ]),\n        rare_class_sampling=dict(\n            min_pixels=3000, class_temp=0.01, min_crop_ratio=0.5)),\n    val=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nuda = dict(\n    type='DACS',\n    alpha=0.999,\n    pseudo_threshold=0.968,\n    pseudo_weight_ignore_top=15,\n    pseudo_weight_ignore_bottom=120,\n    imnet_feature_dist_lambda=0.005,\n    imnet_feature_dist_classes=[6, 7, 11, 12, 13, 14, 15, 16, 17, 18],\n    imnet_feature_dist_scale_min_ratio=0.75,\n    mix='class',\n    blur=True,\n    color_jitter_strength=0.2,\n    color_jitter_probability=0.2,\n    debug_img_interval=1000,\n    print_grad_magnitude=False,\n    tar_aug='weak_strong',\n    weight=2,\n    dropout=0.5,\n    thre='same',\n    bata=0.1,\n    gamar=-5,\n    model=dict(\n        type='EncoderDecoder',\n        pretrained='pretrained/mit_b5.pth',\n        backbone=dict(type='mit_b5', style='pytorch'),\n        decode_head=dict(\n            type='DAFormerHead',\n            in_channels=[64, 128, 320, 512],\n            in_index=[0, 1, 2, 3],\n            channels=256,\n            dropout_ratio=0.1,\n            num_classes=19,\n            norm_cfg=dict(type='BN', requires_grad=True),\n            align_corners=False,\n            decoder_params=dict(\n                embed_dims=256,\n                embed_cfg=dict(type='mlp', act_cfg=None, norm_cfg=None),\n                embed_neck_cfg=dict(type='mlp', act_cfg=None, norm_cfg=None),\n                fusion_cfg=dict(\n                    type='aspp',\n                    sep=True,\n                    dilations=(1, 6, 12, 18),\n                    pool=False,\n                    act_cfg=dict(type='ReLU'),\n                    norm_cfg=dict(type='BN', requires_grad=True))),\n            loss_decode=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n        train_cfg=dict(\n            work_dir=\n            'work_dirs/local-basic/230712_2212_gta2cs_uda_warm_fdthings_rcs_croppl_a999_daformer_mitb5_s0_ac8b1'\n        ),\n        test_cfg=dict(mode='whole')),\n    max_iters=40000)\nuse_ddp_wrapper = True\noptimizer = dict(\n    type='AdamW',\n    lr=6e-05,\n    betas=(0.9, 0.999),\n    weight_decay=0.01,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            head=dict(lr_mult=10.0),\n            pos_block=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = None\nlr_config = dict(\n    policy='poly',\n    warmup='linear',\n    warmup_iters=1500,\n    warmup_ratio=1e-06,\n    power=1.0,\n    min_lr=0.0,\n    by_epoch=False)\nseed = 0\nn_gpus = 1\nrunner = dict(type='IterBasedRunner', max_iters=40000)\ncheckpoint_config = dict(by_epoch=False, interval=40000, max_keep_ckpts=1)\nevaluation = dict(interval=4000, metric='mIoU')\nname = '230712_2212_gta2cs_uda_warm_fdthings_rcs_croppl_a999_daformer_mitb5_s0_ac8b1'\nexp = 'basic'\nname_dataset = 'gta2cityscapes'\nname_architecture = 'daformer_sepaspp_mitb5'\nname_encoder = 'mitb5'\nname_decoder = 'daformer_sepaspp'\nname_uda = 'dacs_a999_fd_things_rcs0.01_cpl'\nname_opt = 'adamw_6e-05_pmTrue_poly10warm_1x2_40k'\nwork_dir = 'work_dirs/local-basic/230712_2212_gta2cs_uda_warm_fdthings_rcs_croppl_a999_daformer_mitb5_s0_ac8b1'\ngit_rev = '6d87ab857665f3c5a4b481c1da3fb5e227792830'\ngpu_ids = range(0, 1)\n", "CLASSES": ["road", "sidewalk", "building", "wall", "fence", "pole", "traffic light", "traffic sign", "vegetation", "terrain", "sky", "person", "rider", "car", "truck", "bus", "train", "motorcycle", "bicycle"], "PALETTE": [[128, 64, 128], [244, 35, 232], [70, 70, 70], [102, 102, 156], [190, 153, 153], [153, 153, 153], [250, 170, 30], [220, 220, 0], [107, 142, 35], [152, 251, 152], [70, 130, 180], [220, 20, 60], [255, 0, 0], [0, 0, 142], [0, 0, 70], [0, 60, 100], [0, 80, 100], [0, 0, 230], [119, 11, 32]]}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.0, "memory": 9814, "data_time": 0.0305, "decode.loss_seg": 2.68648, "decode.acc_seg": 10.32413, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 1.38374, "mix.decode.acc_seg": 18.04296, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 18.78011, "time": 1.52496}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.0, "memory": 9814, "data_time": 0.02034, "decode.loss_seg": 2.39307, "decode.acc_seg": 46.86948, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 1.2711, "mix.decode.acc_seg": 40.81744, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 28.46123, "time": 1.43724}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 1e-05, "memory": 9814, "data_time": 0.02028, "decode.loss_seg": 2.04408, "decode.acc_seg": 62.95905, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.95922, "mix.decode.acc_seg": 57.16083, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 49.55234, "time": 1.43259}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 1e-05, "memory": 9814, "data_time": 0.02042, "decode.loss_seg": 1.60415, "decode.acc_seg": 68.54418, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.84529, "mix.decode.acc_seg": 69.58147, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 64.57137, "time": 1.43316}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 1e-05, "memory": 9814, "data_time": 0.02036, "decode.loss_seg": 1.29786, "decode.acc_seg": 69.14069, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.6541, "mix.decode.acc_seg": 70.03989, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 69.72267, "time": 1.43601}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 1e-05, "memory": 9814, "data_time": 0.01994, "decode.loss_seg": 1.08892, "decode.acc_seg": 70.45739, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.51231, "mix.decode.acc_seg": 73.00636, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 68.9056, "time": 1.43234}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 1e-05, "memory": 9814, "data_time": 0.0202, "decode.loss_seg": 0.95408, "decode.acc_seg": 71.53657, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.50831, "mix.decode.acc_seg": 74.22293, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 73.24425, "time": 1.4366}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 2e-05, "memory": 9814, "data_time": 0.02045, "decode.loss_seg": 0.82516, "decode.acc_seg": 74.16758, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.41428, "mix.decode.acc_seg": 75.96707, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 75.98333, "time": 1.43522}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 2e-05, "memory": 9814, "data_time": 0.0203, "decode.loss_seg": 0.76396, "decode.acc_seg": 73.57032, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.41254, "mix.decode.acc_seg": 76.23361, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 73.65337, "time": 1.43142}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 2e-05, "memory": 9814, "data_time": 0.02045, "decode.loss_seg": 0.74219, "decode.acc_seg": 72.99822, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.41993, "mix.decode.acc_seg": 74.62729, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 74.37722, "time": 1.43224}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 2e-05, "memory": 9814, "data_time": 0.0207, "decode.loss_seg": 0.74495, "decode.acc_seg": 72.44508, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.38621, "mix.decode.acc_seg": 75.05912, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 77.08404, "time": 1.43385}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 2e-05, "memory": 9814, "data_time": 0.02038, "decode.loss_seg": 0.63435, "decode.acc_seg": 73.43247, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.29577, "mix.decode.acc_seg": 76.72031, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 74.48726, "time": 1.43392}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 3e-05, "memory": 9814, "data_time": 0.02044, "decode.loss_seg": 0.59215, "decode.acc_seg": 75.06543, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.33, "mix.decode.acc_seg": 75.95655, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 70.29468, "time": 1.43418}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 3e-05, "memory": 9814, "data_time": 0.02022, "decode.loss_seg": 0.5166, "decode.acc_seg": 80.44604, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.2813, "mix.decode.acc_seg": 79.66668, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 74.16008, "time": 1.43471}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 3e-05, "memory": 9814, "data_time": 0.01998, "decode.loss_seg": 0.47883, "decode.acc_seg": 79.28239, "src.loss_imnet_feat_dist": 0.10761, "mix.decode.loss_seg": 0.27238, "mix.decode.acc_seg": 78.78296, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 67.86467, "time": 1.43214}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 3e-05, "memory": 9814, "data_time": 0.01993, "decode.loss_seg": 0.49322, "decode.acc_seg": 76.131, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.25395, "mix.decode.acc_seg": 76.1907, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 69.72992, "time": 1.43475}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 3e-05, "memory": 9814, "data_time": 0.02, "decode.loss_seg": 0.42866, "decode.acc_seg": 79.68129, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.20483, "mix.decode.acc_seg": 78.92838, "consistency.decode.loss_seg": 1e-05, "consistency.decode.acc_seg": 68.93813, "time": 1.43837}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 4e-05, "memory": 9814, "data_time": 0.01996, "decode.loss_seg": 0.48185, "decode.acc_seg": 77.90644, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.2366, "mix.decode.acc_seg": 78.01525, "consistency.decode.loss_seg": 5e-05, "consistency.decode.acc_seg": 70.21032, "time": 1.4357}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 4e-05, "memory": 9814, "data_time": 0.01995, "decode.loss_seg": 0.44269, "decode.acc_seg": 81.53928, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.20905, "mix.decode.acc_seg": 78.86308, "consistency.decode.loss_seg": 3e-05, "consistency.decode.acc_seg": 65.09288, "time": 1.43691}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 4e-05, "memory": 9814, "data_time": 0.01995, "decode.loss_seg": 0.37112, "decode.acc_seg": 81.30715, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.20712, "mix.decode.acc_seg": 79.73405, "consistency.decode.loss_seg": 8e-05, "consistency.decode.acc_seg": 64.11581, "time": 1.4346}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 4e-05, "memory": 9814, "data_time": 0.02074, "decode.loss_seg": 0.37274, "decode.acc_seg": 81.19979, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.20464, "mix.decode.acc_seg": 77.17805, "consistency.decode.loss_seg": 6e-05, "consistency.decode.acc_seg": 69.22073, "time": 1.49055}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 4e-05, "memory": 9814, "data_time": 0.02094, "decode.loss_seg": 0.4319, "decode.acc_seg": 78.69864, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.2545, "mix.decode.acc_seg": 75.70229, "consistency.decode.loss_seg": 0.00073, "consistency.decode.acc_seg": 58.43036, "time": 1.44058}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 4e-05, "memory": 9814, "data_time": 0.02046, "decode.loss_seg": 0.35566, "decode.acc_seg": 82.35003, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.17548, "mix.decode.acc_seg": 80.63538, "consistency.decode.loss_seg": 0.00018, "consistency.decode.acc_seg": 69.60704, "time": 1.43632}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 5e-05, "memory": 9814, "data_time": 0.02074, "decode.loss_seg": 0.27974, "decode.acc_seg": 83.83372, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.17913, "mix.decode.acc_seg": 80.73661, "consistency.decode.loss_seg": 0.00026, "consistency.decode.acc_seg": 72.12938, "time": 1.44029}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 5e-05, "memory": 9814, "data_time": 0.02062, "decode.loss_seg": 0.27507, "decode.acc_seg": 83.37525, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.16397, "mix.decode.acc_seg": 81.97066, "consistency.decode.loss_seg": 0.00021, "consistency.decode.acc_seg": 77.40455, "time": 1.43764}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 5e-05, "memory": 9814, "data_time": 0.02075, "decode.loss_seg": 0.31167, "decode.acc_seg": 83.93521, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.17206, "mix.decode.acc_seg": 82.62962, "consistency.decode.loss_seg": 0.00043, "consistency.decode.acc_seg": 74.04152, "time": 1.43946}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 5e-05, "memory": 9814, "data_time": 0.0209, "decode.loss_seg": 0.35495, "decode.acc_seg": 81.31763, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.22792, "mix.decode.acc_seg": 80.97899, "consistency.decode.loss_seg": 0.00112, "consistency.decode.acc_seg": 66.25261, "time": 1.4398}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 5e-05, "memory": 9814, "data_time": 0.02067, "decode.loss_seg": 0.24545, "decode.acc_seg": 84.73357, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.16442, "mix.decode.acc_seg": 82.41915, "consistency.decode.loss_seg": 0.00093, "consistency.decode.acc_seg": 77.34708, "time": 1.43925}
{"mode": "train", "epoch": 1, "iter": 1450, "lr": 6e-05, "memory": 9814, "data_time": 0.02081, "decode.loss_seg": 0.27719, "decode.acc_seg": 84.16345, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.19456, "mix.decode.acc_seg": 83.69754, "consistency.decode.loss_seg": 0.00207, "consistency.decode.acc_seg": 76.73644, "time": 1.43776}
{"mode": "train", "epoch": 1, "iter": 1500, "lr": 6e-05, "memory": 9814, "data_time": 0.02079, "decode.loss_seg": 0.39419, "decode.acc_seg": 79.71615, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.25468, "mix.decode.acc_seg": 78.42224, "consistency.decode.loss_seg": 0.0149, "consistency.decode.acc_seg": 49.19842, "time": 1.43893}
{"mode": "train", "epoch": 1, "iter": 1550, "lr": 6e-05, "memory": 9814, "data_time": 0.02035, "decode.loss_seg": 0.31747, "decode.acc_seg": 83.35944, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.21371, "mix.decode.acc_seg": 80.93411, "consistency.decode.loss_seg": 0.00523, "consistency.decode.acc_seg": 67.70965, "time": 1.43525}
{"mode": "train", "epoch": 1, "iter": 1600, "lr": 6e-05, "memory": 9814, "data_time": 0.02037, "decode.loss_seg": 0.40009, "decode.acc_seg": 79.90848, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.2147, "mix.decode.acc_seg": 79.9337, "consistency.decode.loss_seg": 0.0037, "consistency.decode.acc_seg": 76.1413, "time": 1.43739}
{"mode": "train", "epoch": 1, "iter": 1650, "lr": 6e-05, "memory": 9814, "data_time": 0.02022, "decode.loss_seg": 0.28293, "decode.acc_seg": 84.26708, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.20002, "mix.decode.acc_seg": 83.4149, "consistency.decode.loss_seg": 0.00201, "consistency.decode.acc_seg": 83.40718, "time": 1.43555}
{"mode": "train", "epoch": 1, "iter": 1700, "lr": 6e-05, "memory": 9814, "data_time": 0.02039, "decode.loss_seg": 0.38496, "decode.acc_seg": 81.29626, "src.loss_imnet_feat_dist": 0.12706, "mix.decode.loss_seg": 0.32785, "mix.decode.acc_seg": 79.88904, "consistency.decode.loss_seg": 0.00757, "consistency.decode.acc_seg": 75.61795, "time": 1.4347}
{"mode": "train", "epoch": 1, "iter": 1750, "lr": 6e-05, "memory": 9814, "data_time": 0.02062, "decode.loss_seg": 0.36667, "decode.acc_seg": 80.62421, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.31298, "mix.decode.acc_seg": 79.22444, "consistency.decode.loss_seg": 0.00611, "consistency.decode.acc_seg": 79.23223, "time": 1.44184}
{"mode": "train", "epoch": 1, "iter": 1800, "lr": 6e-05, "memory": 9814, "data_time": 0.02072, "decode.loss_seg": 0.27352, "decode.acc_seg": 83.69551, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.22154, "mix.decode.acc_seg": 81.97366, "consistency.decode.loss_seg": 0.00451, "consistency.decode.acc_seg": 83.08217, "time": 1.44047}
{"mode": "train", "epoch": 1, "iter": 1850, "lr": 6e-05, "memory": 9814, "data_time": 0.02061, "decode.loss_seg": 0.25853, "decode.acc_seg": 85.12954, "src.loss_imnet_feat_dist": 0.12779, "mix.decode.loss_seg": 0.18771, "mix.decode.acc_seg": 83.66337, "consistency.decode.loss_seg": 0.00206, "consistency.decode.acc_seg": 85.60478, "time": 1.43819}
{"mode": "train", "epoch": 1, "iter": 1900, "lr": 6e-05, "memory": 9814, "data_time": 0.02061, "decode.loss_seg": 0.31627, "decode.acc_seg": 82.51952, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.21611, "mix.decode.acc_seg": 83.08837, "consistency.decode.loss_seg": 0.00244, "consistency.decode.acc_seg": 86.26923, "time": 1.43996}
{"mode": "train", "epoch": 1, "iter": 1950, "lr": 6e-05, "memory": 9814, "data_time": 0.02093, "decode.loss_seg": 0.34686, "decode.acc_seg": 82.58585, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.21287, "mix.decode.acc_seg": 83.1666, "consistency.decode.loss_seg": 0.00494, "consistency.decode.acc_seg": 84.63304, "time": 1.44256}
{"mode": "train", "epoch": 1, "iter": 2000, "lr": 6e-05, "memory": 9814, "data_time": 0.02062, "decode.loss_seg": 0.25764, "decode.acc_seg": 83.42334, "src.loss_imnet_feat_dist": 0.12424, "mix.decode.loss_seg": 0.20263, "mix.decode.acc_seg": 84.05425, "consistency.decode.loss_seg": 0.00246, "consistency.decode.acc_seg": 88.11523, "time": 1.44323}
{"mode": "train", "epoch": 1, "iter": 2050, "lr": 6e-05, "memory": 9814, "data_time": 0.02068, "decode.loss_seg": 0.22354, "decode.acc_seg": 84.65939, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.19025, "mix.decode.acc_seg": 86.08713, "consistency.decode.loss_seg": 0.00602, "consistency.decode.acc_seg": 86.19834, "time": 1.46805}
{"mode": "train", "epoch": 1, "iter": 2100, "lr": 6e-05, "memory": 9814, "data_time": 0.02059, "decode.loss_seg": 0.21898, "decode.acc_seg": 84.01652, "src.loss_imnet_feat_dist": 0.11952, "mix.decode.loss_seg": 0.201, "mix.decode.acc_seg": 83.75335, "consistency.decode.loss_seg": 0.00352, "consistency.decode.acc_seg": 88.15554, "time": 1.43991}
{"mode": "train", "epoch": 1, "iter": 2150, "lr": 6e-05, "memory": 9814, "data_time": 0.02063, "decode.loss_seg": 0.2551, "decode.acc_seg": 84.46756, "src.loss_imnet_feat_dist": 0.11721, "mix.decode.loss_seg": 0.20673, "mix.decode.acc_seg": 83.38919, "consistency.decode.loss_seg": 0.0041, "consistency.decode.acc_seg": 87.74828, "time": 1.43811}
{"mode": "train", "epoch": 1, "iter": 2200, "lr": 6e-05, "memory": 9814, "data_time": 0.02079, "decode.loss_seg": 0.24308, "decode.acc_seg": 84.16396, "src.loss_imnet_feat_dist": 0.12039, "mix.decode.loss_seg": 0.20543, "mix.decode.acc_seg": 83.59295, "consistency.decode.loss_seg": 0.00343, "consistency.decode.acc_seg": 88.60268, "time": 1.43825}
