{"env_info": "sys.platform: linux\nPython: 3.6.9 (default, Jan 26 2021, 15:33:00) [GCC 8.4.0]\nCUDA available: True\nGPU 0: Tesla V100-SXM2-16GB\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 10.2, V10.2.89\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.8.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.2\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70\n  - CuDNN 7.6.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.2, CUDNN_VERSION=7.6.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.0\nOpenCV: 4.4.0\nMMCV: 1.3.7\nMMCV Compiler: GCC 7.5\nMMCV CUDA Compiler: 10.2\nMMSegmentation: 0.16.0+6d87ab8", "seed": 0, "exp_name": "230730_0324_gta2cs_uda_warm_fdthings_rcs_croppl_a999_daformer_mitb5_s0_ef912", "mmseg_version": "0.16.0+6d87ab8", "config": "log_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\nnorm_cfg = dict(type='BN', requires_grad=True)\nfind_unused_parameters = True\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained='pretrained/mit_b5.pth',\n    backbone=dict(type='mit_b5', style='pytorch'),\n    decode_head=dict(\n        type='DAFormerHead',\n        in_channels=[64, 128, 320, 512],\n        in_index=[0, 1, 2, 3],\n        channels=256,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        align_corners=False,\n        decoder_params=dict(\n            embed_dims=256,\n            embed_cfg=dict(type='mlp', act_cfg=None, norm_cfg=None),\n            embed_neck_cfg=dict(type='mlp', act_cfg=None, norm_cfg=None),\n            fusion_cfg=dict(\n                type='aspp',\n                sep=True,\n                dilations=(1, 6, 12, 18),\n                pool=False,\n                act_cfg=dict(type='ReLU'),\n                norm_cfg=dict(type='BN', requires_grad=True))),\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    train_cfg=dict(\n        work_dir=\n        'work_dirs/local-basic/230730_0324_gta2cs_uda_warm_fdthings_rcs_croppl_a999_daformer_mitb5_s0_ef912'\n    ),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'CityscapesDataset'\ndata_root = 'data/cityscapes/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (512, 512)\ngta_train_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(1280, 720)),\n    dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ncityscapes_train_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(1024, 512)),\n    dict(type='RandomCrop', crop_size=(512, 512)),\n    dict(type='RandomFlip', prob=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1024, 512),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=4,\n    train=dict(\n        type='UDADataset',\n        source=dict(\n            type='GTADataset',\n            data_root='data/gta/',\n            img_dir='images',\n            ann_dir='labels',\n            pipeline=[\n                dict(type='LoadImageFromFile'),\n                dict(type='LoadAnnotations'),\n                dict(type='Resize', img_scale=(1280, 720)),\n                dict(\n                    type='RandomCrop',\n                    crop_size=(512, 512),\n                    cat_max_ratio=0.75),\n                dict(type='RandomFlip', prob=0.5),\n                dict(\n                    type='Normalize',\n                    mean=[123.675, 116.28, 103.53],\n                    std=[58.395, 57.12, 57.375],\n                    to_rgb=True),\n                dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),\n                dict(type='DefaultFormatBundle'),\n                dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n            ]),\n        target=dict(\n            type='CityscapesDataset',\n            data_root='data/cityscapes/',\n            img_dir='leftImg8bit/train',\n            ann_dir='gtFine/train',\n            pipeline=[\n                dict(type='LoadImageFromFile'),\n                dict(type='LoadAnnotations'),\n                dict(type='Resize', img_scale=(1024, 512)),\n                dict(type='RandomCrop', crop_size=(512, 512)),\n                dict(type='RandomFlip', prob=0.5),\n                dict(\n                    type='Normalize',\n                    mean=[123.675, 116.28, 103.53],\n                    std=[58.395, 57.12, 57.375],\n                    to_rgb=True),\n                dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),\n                dict(type='DefaultFormatBundle'),\n                dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n            ]),\n        rare_class_sampling=dict(\n            min_pixels=3000, class_temp=0.01, min_crop_ratio=0.5)),\n    val=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CityscapesDataset',\n        data_root='data/cityscapes/',\n        img_dir='leftImg8bit/val',\n        ann_dir='gtFine/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1024, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nuda = dict(\n    type='DACS',\n    alpha=0.999,\n    pseudo_threshold=0.968,\n    pseudo_weight_ignore_top=15,\n    pseudo_weight_ignore_bottom=120,\n    imnet_feature_dist_lambda=0.005,\n    imnet_feature_dist_classes=[6, 7, 11, 12, 13, 14, 15, 16, 17, 18],\n    imnet_feature_dist_scale_min_ratio=0.75,\n    mix='class',\n    blur=True,\n    color_jitter_strength=0.2,\n    color_jitter_probability=0.2,\n    debug_img_interval=1000,\n    print_grad_magnitude=False,\n    tar_aug='weak_strong',\n    weight=1,\n    dropout=True,\n    thre='same',\n    model=dict(\n        type='EncoderDecoder',\n        pretrained='pretrained/mit_b5.pth',\n        backbone=dict(type='mit_b5', style='pytorch'),\n        decode_head=dict(\n            type='DAFormerHead',\n            in_channels=[64, 128, 320, 512],\n            in_index=[0, 1, 2, 3],\n            channels=256,\n            dropout_ratio=0.1,\n            num_classes=19,\n            norm_cfg=dict(type='BN', requires_grad=True),\n            align_corners=False,\n            decoder_params=dict(\n                embed_dims=256,\n                embed_cfg=dict(type='mlp', act_cfg=None, norm_cfg=None),\n                embed_neck_cfg=dict(type='mlp', act_cfg=None, norm_cfg=None),\n                fusion_cfg=dict(\n                    type='aspp',\n                    sep=True,\n                    dilations=(1, 6, 12, 18),\n                    pool=False,\n                    act_cfg=dict(type='ReLU'),\n                    norm_cfg=dict(type='BN', requires_grad=True))),\n            loss_decode=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n        train_cfg=dict(\n            work_dir=\n            'work_dirs/local-basic/230730_0324_gta2cs_uda_warm_fdthings_rcs_croppl_a999_daformer_mitb5_s0_ef912'\n        ),\n        test_cfg=dict(mode='whole')),\n    max_iters=40000)\nuse_ddp_wrapper = True\noptimizer = dict(\n    type='AdamW',\n    lr=6e-05,\n    betas=(0.9, 0.999),\n    weight_decay=0.01,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            head=dict(lr_mult=10.0),\n            pos_block=dict(decay_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = None\nlr_config = dict(\n    policy='poly',\n    warmup='linear',\n    warmup_iters=1500,\n    warmup_ratio=1e-06,\n    power=1.0,\n    min_lr=0.0,\n    by_epoch=False)\nseed = 0\nn_gpus = 1\nrunner = dict(type='IterBasedRunner', max_iters=40000)\ncheckpoint_config = dict(by_epoch=False, interval=40000, max_keep_ckpts=1)\nevaluation = dict(interval=4000, metric='mIoU')\nname = '230730_0324_gta2cs_uda_warm_fdthings_rcs_croppl_a999_daformer_mitb5_s0_ef912'\nexp = 'basic'\nname_dataset = 'gta2cityscapes'\nname_architecture = 'daformer_sepaspp_mitb5'\nname_encoder = 'mitb5'\nname_decoder = 'daformer_sepaspp'\nname_uda = 'dacs_a999_fd_things_rcs0.01_cpl'\nname_opt = 'adamw_6e-05_pmTrue_poly10warm_1x2_40k'\nwork_dir = 'work_dirs/local-basic/230730_0324_gta2cs_uda_warm_fdthings_rcs_croppl_a999_daformer_mitb5_s0_ef912'\ngit_rev = '6d87ab857665f3c5a4b481c1da3fb5e227792830'\ngpu_ids = range(0, 1)\n", "CLASSES": ["road", "sidewalk", "building", "wall", "fence", "pole", "traffic light", "traffic sign", "vegetation", "terrain", "sky", "person", "rider", "car", "truck", "bus", "train", "motorcycle", "bicycle"], "PALETTE": [[128, 64, 128], [244, 35, 232], [70, 70, 70], [102, 102, 156], [190, 153, 153], [153, 153, 153], [250, 170, 30], [220, 220, 0], [107, 142, 35], [152, 251, 152], [70, 130, 180], [220, 20, 60], [255, 0, 0], [0, 0, 142], [0, 0, 70], [0, 60, 100], [0, 80, 100], [0, 0, 230], [119, 11, 32]]}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.0, "memory": 9810, "data_time": 0.0325, "decode.loss_seg": 2.68186, "decode.acc_seg": 11.10425, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 1.52532, "mix.decode.acc_seg": 17.63139, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 25.10293, "time": 1.44808}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.0, "memory": 9810, "data_time": 0.02193, "decode.loss_seg": 2.39188, "decode.acc_seg": 47.22055, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 1.31193, "mix.decode.acc_seg": 39.92069, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 33.63003, "time": 1.34094}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 1e-05, "memory": 9810, "data_time": 0.02148, "decode.loss_seg": 2.04066, "decode.acc_seg": 63.26874, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 1.00887, "mix.decode.acc_seg": 56.37141, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 55.7424, "time": 1.34002}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 1e-05, "memory": 9810, "data_time": 0.02205, "decode.loss_seg": 1.60131, "decode.acc_seg": 68.11757, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.8355, "mix.decode.acc_seg": 70.26904, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 75.09342, "time": 1.3417}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 1e-05, "memory": 9810, "data_time": 0.02171, "decode.loss_seg": 1.30407, "decode.acc_seg": 68.91893, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.60879, "mix.decode.acc_seg": 70.09598, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 80.26361, "time": 1.33654}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 1e-05, "memory": 9811, "data_time": 0.02169, "decode.loss_seg": 1.09874, "decode.acc_seg": 70.43042, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.5418, "mix.decode.acc_seg": 73.70876, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 80.80123, "time": 1.34511}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 1e-05, "memory": 9811, "data_time": 0.0217, "decode.loss_seg": 0.95991, "decode.acc_seg": 71.42483, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.49183, "mix.decode.acc_seg": 75.17226, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 83.06964, "time": 1.33418}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 2e-05, "memory": 9811, "data_time": 0.0215, "decode.loss_seg": 0.83088, "decode.acc_seg": 73.86034, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.42706, "mix.decode.acc_seg": 75.89867, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 84.60368, "time": 1.3425}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 2e-05, "memory": 9811, "data_time": 0.02131, "decode.loss_seg": 0.76555, "decode.acc_seg": 73.56144, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.42349, "mix.decode.acc_seg": 75.96702, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 85.36259, "time": 1.34645}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 2e-05, "memory": 9811, "data_time": 0.02106, "decode.loss_seg": 0.74331, "decode.acc_seg": 72.85537, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.38742, "mix.decode.acc_seg": 76.99379, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 85.74747, "time": 1.35403}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 2e-05, "memory": 9811, "data_time": 0.02104, "decode.loss_seg": 0.74024, "decode.acc_seg": 72.6502, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.43545, "mix.decode.acc_seg": 75.2279, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 86.91784, "time": 1.34546}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 2e-05, "memory": 9811, "data_time": 0.02163, "decode.loss_seg": 0.63816, "decode.acc_seg": 72.987, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.32706, "mix.decode.acc_seg": 74.84272, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 84.86986, "time": 1.35352}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 3e-05, "memory": 9811, "data_time": 0.02101, "decode.loss_seg": 0.59463, "decode.acc_seg": 75.31419, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.29324, "mix.decode.acc_seg": 78.22565, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 85.88256, "time": 1.3433}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 3e-05, "memory": 9811, "data_time": 0.02149, "decode.loss_seg": 0.52234, "decode.acc_seg": 80.09501, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.26844, "mix.decode.acc_seg": 77.37427, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 83.53571, "time": 1.34395}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 3e-05, "memory": 9811, "data_time": 0.0213, "decode.loss_seg": 0.46185, "decode.acc_seg": 80.34816, "src.loss_imnet_feat_dist": 0.10675, "mix.decode.loss_seg": 0.22981, "mix.decode.acc_seg": 79.79154, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 85.09184, "time": 1.34377}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 3e-05, "memory": 9811, "data_time": 0.02151, "decode.loss_seg": 0.48292, "decode.acc_seg": 76.98703, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.25083, "mix.decode.acc_seg": 76.33577, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 82.9219, "time": 1.3544}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 3e-05, "memory": 9811, "data_time": 0.02162, "decode.loss_seg": 0.43505, "decode.acc_seg": 79.5132, "src.loss_imnet_feat_dist": NaN, "mix.decode.loss_seg": 0.22561, "mix.decode.acc_seg": 78.1568, "consistency.decode.loss_seg": 0.0, "consistency.decode.acc_seg": 84.67823, "time": 1.34804}
